{"version":3,"sources":["ColumnElementManager.js","DropdownElementManager.js","PaginationElementManager.js","RowElementManager.js","SearchElementManager.js","SortIndicatorElementManager.js","TableElementManager.js","Factory/BaseElementManager.js"],"names":["ColumnElementManager","let","instance","initialize","container","manager","BaseElementManager","createElementManager","state","Object","entries","columnComponent","columnHeader","columnTitle","containerAllColumns","sortIndicatorPlaceholder","forEach","key","value","setClassName","columnCount","columnTitles","arrowsVisible","getColumnInsertionPoint","forceQuery","getElement","getClassName","getColumnComponentClass","getColumnHeaderClass","getColumnTitleClass","getContainerAllColumnsClass","getSortIndicatorPlaceholderClass","setColumnCount","count","getColumnCount","addColumnTitle","title","includes","push","swapColumnTitles","title1","title2","index1","this","getColumnTitleIndex","index2","console","warn","addColumnTitleAtIndex","index","newTitle","removeColumnTitle","Math","max","min","length","splice","indexOf","getAllColumns","querySelectorAll","getColumnByIndex","columns","getColumnHeaders","Array","from","map","column","titleElement","querySelector","textContent","trim","filter","Boolean","removeColumnByTitle","removeColumn","toggleDropdownArrows","visible","style","existingStyle","document","getElementById","remove","createElement","id","head","appendChild","createColumnTemplate","dropdownHeaderCell","classList","add","dropdownContainer","controlButton","flexContainer","arrowSpan","dropdownContent","sortHeaderCell","SortIndicatorModule","registerContainer","columnName","registerContainerEvents","DropdownContainerModule","appendColumns","fragment","createDocumentFragment","DOMUtils","batchUpdate","unregisterContainer","getInstance","clearCache","hideDropdownArrows","showDropdownArrows","DropdownElementManager","dropdownButton","dropdownButtonColumn","arrow","showClass","openClass","staticInput","dropdownItem","customInput","setButton","valueContainer","valueText","sortIndicators","checkboxList","checkboxItem","closeIcon","closeButton","dropdownTypes","column-dropdown","row-dropdown","search-dropdown","sort-dropdown","column-title-dropdown","row-info-dropdown","getDropdownType","className","type","contains","context","getDropdownButton","getDropdownButtonColumn","getDropdownContent","getCloseIcon","getArrow","getCloseButton","getTitleElement","getValueContainer","button","getValueText","getStaticInputButtons","getSetButton","getCustomInput","getCheckboxList","getCheckboxItem","getFirstDropdownItem","content","getAllDropdownContainers","getElements","getSortIndicators","createCloseButton","buttonText","innerHTML","createValueStructure","text","textElem","childNodes","find","node","nodeType","Node","TEXT_NODE","labelText","createTextNode","setAttribute","getInstancesByType","PaginationElementManager","paginationContainer","paginationControls","paginationInfo","currentPage","maxPage","fastForwardButton","fastBackwardButton","parent","selector","getPaginationControls","getPaginationInfo","getCurrentPage","info","getMaxPage","getPrevious","controls","getFastBackward","fastBackwardClass","closest","getNext","getFastForward","fastForwardClass","setCurrentPageText","page","currentPageEl","setMaxPageText","totalPages","maxPageEl","updateButtonStates","buttons","prev","fastBack","next","fastForward","toggle","RowElementManager","SUPPORTED_COLUMNS","tableRow","columnCell","containerAllRows","getRowInsertionPoint","getAllRows","getRowByIndex","rows","getRowCount","getCellsForRow","row","getTableRowClass","getColumnCellClass","getContainerAllRowsClass","createCellTemplate","cellData","cell","createDropdownArrow","dropdownArrow","createAttributePair","attr","attributePair","nameElement","valueElement","name","addRowStyles","createBaseRow","position","dataset","expanded","i","createErrorDetailPanel","errorMessage","detailPanel","errorContent","color","createDetailPanel","rowData","displayedColumns","detailContent","detailHeader","detailTitle","attributesLayout","hiddenAttributes","col","messageElem","fontStyle","attributeGroup","attr1","attr2","createRowTemplate","_addCellMethod","_setInitialRowInteractivity","_delegationInitialized","_setupRowDelegation","mgr","addCell","newCell","insertBefore","shouldBeInteractive","_areAllColumnsDisplayed","cursor","display","currentColumns","every","addEventListener","event","target","_handleRowClick","_setupColumnChangeListeners","rowIndex","newState","_expandRowDetailPanel","_collapseRowDetailPanel","removeChild","parseInt","TableDataModule","getPageData","RowManagerModule","then","data","isArray","_animateDetailPanelOpen","error","catch","err","setTimeout","parentNode","offsetHeight","_updateRowInteractivity","_refreshOpenDetailPanels","allRows","collapseExpandedRow","_updateDetailPanelContent","appendRows","removeLastNRows","removedRows","lastChild","clearRowsContent","createCellsForColumns","createdCells","j","removeCellsAtColumnIndex","columnIndex","cells","SearchElementManager","searchInput","clearButton","searchContainer","searchIcon","searchArea","searchResults","hidden","getSearchInput","getClearIcon","getSearchContainer","getSearchIcon","getSearchArea","getSearchResultsContainer","getHiddenClass","updatePlaceholder","input","placeholderText","placeholder","updateClearButtonVisibility","isVisible","clearSearchInput","setSearchResultText","SortIndicatorElementManager","sortIndicatorsClass","triangleUpClass","triangleDownClass","disabledClass","getSortIndicatorsClass","getTriangleUpClass","getTriangleDownClass","getDisabledClass","createSortIndicatorTemplate","upTriangle","downTriangle","scale","gap","marginBottom","createSortPlaceholder","setTriangleState","element","direction","isActive","clearIndicator","removeIndicator","TableElementManager","tableTitle","tableControls","moveColumnsHeader","moveColumnsExit","getTableTitle","getTableControls","getTableTitleHeading","createMoveColumnsHeader","header","createMoveColumnsExit","getOrCreateSubtitle","existingSubtitle","subtitle","updateTitleText","updateSubtitleText","subtitleElement","applyMoveColumnsHeaderStyle","fontSize","fontWeight","paddingTop","applyMoveColumnsExitStyle","moduleType","moduleContainer","NodeList","elementCache","ElementCache","createCache","classNameRegistry","errorContext","targetContainer","get","elements","getAll","clear"],"mappings":"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","file":"element-managers.min.js","sourcesContent":["/**\r\n * @title ColumnElementManager\r\n * @description Manages column-related elements, class names, and operations\r\n * @author Daniel Oliveira\r\n */\r\nconst ColumnElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createColumnElementManager(container) {\r\n        // Create base element manager\r\n        const manager = BaseElementManager.createElementManager('column', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            columnComponent: 'column-component',\r\n            columnHeader: 'column-header',\r\n            columnTitle: 'column-title',\r\n            containerAllColumns: 'container-all-columns',\r\n            sortIndicatorPlaceholder: 'sort-indicator-placeholder'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // INTERNAL STATE\r\n        const state = {\r\n            columnCount: 0,\r\n            columnTitles: [],\r\n            arrowsVisible: true\r\n        };\r\n\r\n        // ELEMENT ACCESS METHODS\r\n        manager.getColumnInsertionPoint = (forceQuery = false) => \r\n            manager.getElement(`.${manager.getClassName('containerAllColumns')}`, \"getColumnInsertionPoint()\", forceQuery);\r\n\r\n        // CLASS NAME GETTERS\r\n        manager.getColumnComponentClass = () => manager.getClassName('columnComponent');\r\n        manager.getColumnHeaderClass = () => manager.getClassName('columnHeader');\r\n        manager.getColumnTitleClass = () => manager.getClassName('columnTitle');\r\n        manager.getContainerAllColumnsClass = () => manager.getClassName('containerAllColumns');\r\n        manager.getSortIndicatorPlaceholderClass = () => manager.getClassName('sortIndicatorPlaceholder');\r\n\r\n        // COLUMN COUNT METHODS\r\n        manager.setColumnCount = function (count) {\r\n            state.columnCount = count;\r\n        };\r\n\r\n        manager.getColumnCount = () => state.columnCount;\r\n\r\n        // COLUMN TITLE MANAGEMENT\r\n        manager.addColumnTitle = function (title) {\r\n            if (!state.columnTitles.includes(title)) {\r\n                state.columnTitles.push(title);\r\n            }\r\n        };\r\n\r\n        manager.swapColumnTitles = function (title1, title2) {\r\n            const index1 = this.getColumnTitleIndex(title1);\r\n            const index2 = this.getColumnTitleIndex(title2);\r\n\r\n            if (index1 === -1 || index2 === -1) {\r\n                console.warn(`Cannot swap columns: one or both titles not found (${title1}, ${title2})`);\r\n                return false;\r\n            }\r\n\r\n            // Swap titles in the internal array\r\n            [state.columnTitles[index1], state.columnTitles[index2]] = [title2, title1];\r\n            \r\n            return true;\r\n        };\r\n\r\n        manager.addColumnTitleAtIndex = function (title, index, newTitle) {\r\n            // Remove existing title to avoid duplicates\r\n            this.removeColumnTitle(title);\r\n\r\n            // Ensure index is within bounds\r\n            index = Math.max(0, Math.min(index, state.columnTitles.length));\r\n\r\n            // Insert the title at the specified index\r\n            state.columnTitles.splice(index, 0, newTitle);\r\n        };\r\n\r\n        manager.removeColumnTitle = function (title) {\r\n            const index = this.getColumnTitleIndex(title);\r\n            \r\n            if (index !== -1) {\r\n                state.columnTitles.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        manager.getColumnTitleIndex = function (title) {\r\n            return state.columnTitles.indexOf(title);\r\n        };\r\n\r\n        // COLUMN ELEMENT ACCESS\r\n        manager.getAllColumns = function (forceQuery = false) {\r\n            const container = this.getColumnInsertionPoint(forceQuery);\r\n            return container ? container.querySelectorAll(`.${this.getClassName('columnComponent')}`) : [];\r\n        };\r\n\r\n        manager.getColumnByIndex = function (index, forceQuery = false) {\r\n            const columns = this.getAllColumns(forceQuery);\r\n            return (index >= 0 && index < columns.length) ? columns[index] : null;\r\n        };\r\n\r\n        manager.getColumnHeaders = function (forceQuery = false) {\r\n            // If forceQuery is true, lookup headers from DOM\r\n            if (forceQuery) {\r\n                const columns = this.getAllColumns(true);\r\n                return Array.from(columns)\r\n                    .map(column => {\r\n                        const titleElement = column.querySelector(`.${this.getClassName('columnTitle')}`);\r\n                        return titleElement ? titleElement.textContent.trim() : '';\r\n                    })\r\n                    .filter(Boolean);\r\n            }\r\n\r\n            // Return a copy of internal column titles\r\n            return [...state.columnTitles];\r\n        };\r\n\r\n        // COLUMN REMOVAL\r\n        manager.removeColumnByTitle = function (title) {\r\n            // Remove from DOM\r\n            const columns = this.getAllColumns();\r\n            for (let column of columns) {\r\n                const titleElement = column.querySelector(`.${this.getClassName('columnTitle')}`);\r\n                if (titleElement && titleElement.textContent.trim() === title) {\r\n                    this.removeColumn(column);\r\n                    // Decrement column count\r\n                    this.setColumnCount(this.getColumnCount() - 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Remove from internal stack\r\n            this.removeColumnTitle(title);\r\n        };\r\n\r\n        // DROPDOWN ARROW VISIBILITY\r\n        manager.toggleDropdownArrows = function (visible = true) {\r\n            // Skip if already in desired state\r\n            if (visible === state.arrowsVisible) return;\r\n\r\n            // Remove any previously added style\r\n            const existingStyle = document.getElementById('dropdown-arrow-style');\r\n            if (existingStyle) {\r\n                existingStyle.remove();\r\n            }\r\n\r\n            if (!visible) {\r\n                const columnContainer = this.getColumnInsertionPoint();\r\n\r\n                if (columnContainer) {\r\n                    const style = document.createElement('style');\r\n                    style.id = 'dropdown-arrow-style';\r\n                    style.textContent = `.${this.getClassName('containerAllColumns')} .dropdown-arrow { display: none !important; }`;\r\n                    document.head.appendChild(style);\r\n                }\r\n            }\r\n\r\n            // Update tracked state\r\n            state.arrowsVisible = visible;\r\n        };\r\n\r\n        // COLUMN TEMPLATE CREATION\r\n        manager.createColumnTemplate = function (title) {\r\n            // Create main column component\r\n            const column = document.createElement('div');\r\n            column.classList.add(this.getClassName('columnComponent'));\r\n\r\n            // Create dropdown header cell\r\n            const dropdownHeaderCell = document.createElement('div');\r\n            dropdownHeaderCell.classList.add('header-cell');\r\n\r\n            // Create dropdown container\r\n            const dropdownContainer = document.createElement('div');\r\n            dropdownContainer.classList.add('dropdown-container', 'column-title-dropdown');\r\n\r\n            // Create control button\r\n            const controlButton = document.createElement('button');\r\n            controlButton.classList.add('data-table__control-btn-column', this.getClassName('columnTitle'));\r\n            controlButton.id = title;\r\n\r\n            // Create flexible container for spans\r\n            const flexContainer = document.createElement('div');\r\n            flexContainer.classList.add('d-flex', 'gap-3', 'align-items-center', 'justify-content-center', 'mx-2');\r\n\r\n            // Create and append arrow span\r\n            const arrowSpan = document.createElement('span');\r\n            arrowSpan.classList.add('dropdown-arrow');\r\n            flexContainer.appendChild(arrowSpan);\r\n            controlButton.appendChild(flexContainer);\r\n\r\n            // Create dropdown content container\r\n            const dropdownContent = document.createElement('div');\r\n            dropdownContent.classList.add('dropdown-content-container');\r\n\r\n            // Assemble dropdown structure\r\n            dropdownContainer.appendChild(controlButton);\r\n            dropdownContainer.appendChild(dropdownContent);\r\n            dropdownHeaderCell.appendChild(dropdownContainer);\r\n\r\n            // Create sort header cell\r\n            const sortHeaderCell = document.createElement('div');\r\n            sortHeaderCell.classList.add('header-cell');\r\n\r\n            // Create sort indicator placeholder\r\n            const sortIndicatorPlaceholder = document.createElement('div');\r\n            sortIndicatorPlaceholder.classList.add(this.getClassName('sortIndicatorPlaceholder'));\r\n            sortHeaderCell.appendChild(sortIndicatorPlaceholder);\r\n\r\n            // Register sort indicator\r\n            const indicatorInfo = SortIndicatorModule.registerContainer(sortIndicatorPlaceholder, -1, {\r\n                columnName: title\r\n            });\r\n\r\n            // Register sort indicator events\r\n            SortIndicatorModule.registerContainerEvents(sortHeaderCell, sortIndicatorPlaceholder);\r\n\r\n            // Assemble column\r\n            column.appendChild(dropdownHeaderCell);\r\n            column.appendChild(sortHeaderCell);\r\n\r\n            // Add title to internal stack\r\n            this.addColumnTitle(title);\r\n            DropdownContainerModule.initialize(dropdownContainer);\r\n\r\n            return column;\r\n        };\r\n\r\n        // BATCH COLUMN OPERATIONS\r\n        manager.appendColumns = function (columns, container) {\r\n            if (!columns?.length || !container) return;\r\n\r\n            const fragment = document.createDocumentFragment();\r\n            columns.forEach(column => fragment.appendChild(column));\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                container.appendChild(fragment);\r\n            });\r\n        };\r\n\r\n        // COLUMN REMOVAL WITH ANIMATION\r\n        manager.removeColumn = function (column) {\r\n            if (!column) return;\r\n\r\n            // Unregister sort indicator\r\n            const sortIndicatorPlaceholder = column.querySelector(`.${this.getClassName('sortIndicatorPlaceholder')}`);\r\n            if (sortIndicatorPlaceholder) {\r\n                SortIndicatorModule.unregisterContainer(sortIndicatorPlaceholder);\r\n            }\r\n\r\n            // Remove with batch update for animation\r\n            DOMUtils.batchUpdate(() => {\r\n                column.remove();\r\n            });\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        // Initialization\r\n        initialize(container) {\r\n            if (!instance) instance = createColumnElementManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance() {\r\n            return instance;\r\n        },\r\n\r\n        // Proxy methods to instance with safe fallbacks\r\n        getColumnInsertionPoint: forceQuery => instance?.getColumnInsertionPoint(forceQuery) ?? null,\r\n        getColumnComponentClass: () => instance?.getColumnComponentClass() ?? 'column-component',\r\n        getColumnHeaderClass: () => instance?.getColumnHeaderClass() ?? 'column-header',\r\n        getColumnTitleClass: () => instance?.getColumnTitleClass() ?? 'column-title',\r\n        getContainerAllColumnsClass: () => instance?.getContainerAllColumnsClass() ?? 'container-all-columns',\r\n        getSortIndicatorPlaceholderClass: () => instance?.getSortIndicatorPlaceholderClass() ?? 'sort-indicator-placeholder',\r\n\r\n        setColumnCount: count => instance?.setColumnCount(count),\r\n        getColumnCount: () => instance?.getColumnCount() ?? 0,\r\n\r\n        getAllColumns: forceQuery => instance?.getAllColumns(forceQuery) ?? [],\r\n        getColumnByIndex: (index, forceQuery) => instance?.getColumnByIndex(index, forceQuery) ?? null,\r\n        getColumnHeaders: forceQuery => instance?.getColumnHeaders(forceQuery) ?? [],\r\n\r\n        // Column title management methods\r\n        addColumnTitle: title => instance?.addColumnTitle(title),\r\n        addColumnTitleAtIndex: (title, index, newTitle) => instance?.addColumnTitleAtIndex(title, index, newTitle),\r\n        removeColumnTitle: title => instance?.removeColumnTitle(title),\r\n        removeColumnByTitle: title => instance?.removeColumnByTitle(title),\r\n        getColumnTitleIndex: title => instance?.getColumnTitleIndex(title) ?? -1,\r\n        swapColumnTitles: (title1, title2) => instance?.swapColumnTitles(title1, title2) ?? false,\r\n\r\n        // Column manipulation methods\r\n        appendColumns: (columns, container) => {\r\n            if (instance) {\r\n                instance.appendColumns(columns, container);\r\n            }\r\n        },\r\n        removeColumn: column => {\r\n            if (instance) {\r\n                instance.removeColumn(column);\r\n            }\r\n        },\r\n        createColumnTemplate: title => instance?.createColumnTemplate(title) ?? null,\r\n\r\n        // Utility methods\r\n        setClassName: (key, value) => instance?.setClassName(key, value),\r\n        getClassName: key => instance?.getClassName(key) ?? null,\r\n        clearCache: () => instance?.clearCache(),\r\n\r\n        // Dropdown arrow visibility methods\r\n        toggleDropdownArrows: visible => instance?.toggleDropdownArrows(visible),\r\n        hideDropdownArrows: () => instance?.toggleDropdownArrows(false),\r\n        showDropdownArrows: () => instance?.toggleDropdownArrows(true)\r\n    };\r\n})();","/**\r\n * @title DropdownElementManager\r\n * @description Manages dropdown-related elements\r\n * @author Daniel Oliveira\r\n */\r\nconst DropdownElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createDropdownManager(container) {\r\n        const manager = BaseElementManager.createElementManager('dropdown', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            dropdownButton: 'data-table__control-btn',\r\n            dropdownButtonColumn: 'data-table__control-btn-column',\r\n            dropdownContent: 'dropdown-content-container',\r\n            arrow: 'dropdown-arrow',\r\n            showClass: 'show',\r\n            openClass: 'open',\r\n            staticInput: 'static-input',\r\n            dropdownItem: 'dropdown-item',\r\n            dropdownContainer: 'dropdown-container',\r\n            customInput: 'custom-input',\r\n            setButton: 'set-button',\r\n            valueContainer: 'd-flex',\r\n            valueText: 'span:first-child',\r\n            sortIndicators: 'sort-indicators', // Fixed typo from 'sortIndicatos'\r\n            checkboxList: 'checkbox-list',\r\n            checkboxItem: 'checkbox-item',\r\n            closeIcon: 'close-static-input',\r\n            closeButton: 'close-button',\r\n            titleElement: 'title-element'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // DROPDOWN TYPES\r\n        manager.dropdownTypes = {\r\n            'column-dropdown': 'column',\r\n            'row-dropdown': 'row',\r\n            'search-dropdown': 'search',\r\n            'sort-dropdown': 'sort',\r\n            'column-title-dropdown': 'column-title',\r\n            'row-info-dropdown': 'row-info'\r\n        };\r\n\r\n        // ELEMENT ACCESS METHODS\r\n        manager.getDropdownType = container => {\r\n            if (!container) return null;\r\n            for (const [className, type] of Object.entries(manager.dropdownTypes)) {\r\n                if (container.classList.contains(className)) return type;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const getElement = (container, className, context) =>\r\n            container ? manager.getElement(`.${manager.getClassName(className)}`, context, false, container) : null;\r\n\r\n        manager.getDropdownButton = container => getElement(container, 'dropdownButton', 'getDropdownButton()');\r\n        manager.getDropdownButtonColumn = container => getElement(container, 'dropdownButtonColumn', 'getDropdownButtonColumn()');\r\n        manager.getDropdownContent = container => getElement(container, 'dropdownContent', 'getDropdownContent()');\r\n        manager.getCloseIcon = container => getElement(container, 'closeIcon', 'getCloseIcon()');\r\n        manager.getArrow = container => getElement(container, 'arrow', 'getArrow()');\r\n        manager.getCloseButton = container => getElement(container, 'closeButton', 'getCloseButton()');\r\n        manager.getTitleElement = container => getElement(container, 'titleElement', 'getTitleElement()');\r\n\r\n        manager.getValueContainer = container => {\r\n            if (!container) return null;\r\n            const button = manager.getDropdownButton(container);\r\n            return getElement(button, 'valueContainer', 'getValueContainer()');\r\n        };\r\n\r\n        manager.getValueText = container => {\r\n            if (!container) return null;\r\n            const valueContainer = manager.getValueContainer(container);\r\n            return valueContainer ? manager.getElement(manager.getClassName('valueText'), 'getValueText()', false, valueContainer) : null;\r\n        };\r\n\r\n        manager.getStaticInputButtons = container =>\r\n            container ? Array.from(container.querySelectorAll(`.${manager.getClassName('staticInput')}`)) : [];\r\n\r\n        manager.getSetButton = container => getElement(container, 'setButton', 'getSetButton()');\r\n        manager.getCustomInput = container => getElement(container, 'customInput', 'getCustomInput()');\r\n        manager.getCheckboxList = container => getElement(container, 'checkboxList', 'getCheckboxList()');\r\n        manager.getCheckboxItem = container => getElement(container, 'checkboxItem', 'getCheckboxItem()');\r\n\r\n        manager.getFirstDropdownItem = container => {\r\n            if (!container) return null;\r\n            const content = manager.getDropdownContent(container);\r\n            return content ? manager.getElement(`.${manager.getClassName('dropdownItem')}:first-child`, 'getFirstDropdownItem()', false, content) : null;\r\n        };\r\n\r\n        manager.getAllDropdownContainers = () =>\r\n            manager.getElements(`.${manager.getClassName('dropdownContainer')}`, 'getAllDropdownContainers()');\r\n\r\n        manager.getSortIndicators = container =>\r\n            container ? Array.from(container.querySelectorAll(`.${manager.getClassName('sortIndicators')}`)) : [];\r\n\r\n        // DOM MANIPULATION METHODS\r\n        manager.createCloseButton = (key) => {\r\n            const closeButton = document.createElement('button');\r\n            closeButton.className = `${manager.getClassName('dropdownItem')} ${manager.getClassName('staticInput')} ${manager.getClassName('closeButton')}`;\r\n\r\n            // Use key text if provided, otherwise use \"Close\"\r\n            const buttonText = key ? key : 'Close';\r\n\r\n            closeButton.innerHTML = `\r\n        ${buttonText}\r\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n        </svg>\r\n    `;\r\n            return closeButton;\r\n        };\r\n\r\n        manager.createValueStructure = (button, text) => {\r\n            if (!button || !text) return { textElem: null, arrow: null };\r\n\r\n            const textElem = document.createElement('span');\r\n            const arrow = document.createElement('span');\r\n            arrow.className = manager.getClassName('arrow');\r\n\r\n            const buttonText = Array.from(button.childNodes)\r\n                .find(node => node.nodeType === Node.TEXT_NODE && node.textContent.trim());\r\n            const labelText = buttonText ? buttonText.textContent.trim() : '';\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                textElem.textContent = text;\r\n                button.innerHTML = '';\r\n                if (labelText) button.appendChild(document.createTextNode(labelText));\r\n                button.appendChild(textElem);\r\n                button.appendChild(arrow);\r\n                button.setAttribute('title', text);\r\n            });\r\n\r\n            return { textElem, arrow };\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        initialize(container) {\r\n            if (!instance) instance = createDropdownManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance: () => instance,\r\n\r\n        // Element Access Methods\r\n        getDropdownType: container => instance?.getDropdownType(container) ?? null,\r\n        getDropdownButton: container => instance?.getDropdownButton(container) ?? null,\r\n        getDropdownButtonColumn: container => instance?.getDropdownButtonColumn(container) ?? null,\r\n        getDropdownContent: container => instance?.getDropdownContent(container) ?? null,\r\n        getArrow: container => instance?.getArrow(container) ?? null,\r\n        getValueContainer: container => instance?.getValueContainer(container) ?? null,\r\n        getValueText: container => instance?.getValueText(container) ?? null,\r\n        getStaticInputButtons: container => instance?.getStaticInputButtons(container) ?? [],\r\n        getSetButton: container => instance?.getSetButton(container) ?? null,\r\n        getCustomInput: container => instance?.getCustomInput(container) ?? null,\r\n        getCheckboxList: container => instance?.getCheckboxList(container) ?? null,\r\n        getCheckboxItem: container => instance?.getCheckboxItem(container) ?? null,\r\n        getCloseIcon: container => instance?.getCloseIcon(container) ?? null,\r\n        getFirstDropdownItem: container => instance?.getFirstDropdownItem(container) ?? null,\r\n        getAllDropdownContainers: () => instance?.getAllDropdownContainers() ?? [],\r\n        getSortIndicators: container => instance?.getSortIndicators(container) ?? [],\r\n        getCloseButton: container => instance?.getCloseButton(container) ?? null,\r\n        getTitleElement: container => instance?.getTitleElement(container) ?? null,\r\n\r\n        // DOM Manipulation Methods\r\n        createCloseButton: (key) => instance?.createCloseButton(key) ?? null,\r\n        createValueStructure: (button, text) => instance?.createValueStructure(button, text) ?? { textElem: null, arrow: null },\r\n\r\n        // Utility Method\r\n        getInstancesByType: type => {\r\n            if (!instance || !type) return [];\r\n            return Array.from(instance.getAllDropdownContainers())\r\n                .filter(container => instance.getDropdownType(container) === type);\r\n        },\r\n\r\n        // Base Methods\r\n        getClassName: key => instance?.getClassName(key) ?? '',\r\n        clearCache: () => instance?.clearCache()\r\n    };\r\n})();","/**\r\n * @title PaginationElementManager\r\n * @description Manages pagination-specific elements and DOM operations\r\n * @author Daniel Oliveira\r\n */\r\nconst PaginationElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createPaginationManager(container) {\r\n        const manager = BaseElementManager.createElementManager('pagination', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            paginationContainer: 'data-table__pagination',\r\n            paginationControls: 'pagination-controls',\r\n            paginationInfo: 'pagination-info',\r\n            currentPage: 'current',\r\n            maxPage: 'next',\r\n            fastForwardButton: 'double-triangle-east',\r\n            fastBackwardButton: 'double-triangle-west'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // ELEMENT ACCESS METHODS\r\n\r\n        /**\r\n         * Helper function for element retrieval\r\n         */\r\n        const getElement = (className, context, forceQuery = false, parent = null) => {\r\n            const selector = `.${manager.getClassName(className)}`;\r\n            return parent\r\n                ? parent.querySelector(selector)\r\n                : manager.getElement(selector, context, forceQuery);\r\n        };\r\n\r\n        /**\r\n         * Gets the pagination controls container\r\n         */\r\n        manager.getPaginationControls = (forceQuery = false) =>\r\n            getElement('paginationControls', '@getPaginationControls()', forceQuery);\r\n\r\n        /**\r\n         * Gets the pagination info container\r\n         */\r\n        manager.getPaginationInfo = (forceQuery = false) =>\r\n            getElement('paginationInfo', '@getPaginationInfo()', forceQuery);\r\n\r\n        /**\r\n         * Gets the current page element\r\n         */\r\n        manager.getCurrentPage = (forceQuery = false) => {\r\n            const info = manager.getPaginationInfo(forceQuery);\r\n            return info ? getElement('currentPage', '@getCurrentPage()', forceQuery, info) : null;\r\n        };\r\n\r\n        /**\r\n         * Gets the max page element\r\n         */\r\n        manager.getMaxPage = (forceQuery = false) => {\r\n            const info = manager.getPaginationInfo(forceQuery);\r\n            return info ? getElement('maxPage', '@getMaxPage()', forceQuery, info) : null;\r\n        };\r\n\r\n        /**\r\n         * Gets the previous page button\r\n         */\r\n        manager.getPrevious = (forceQuery = false) => {\r\n            const controls = manager.getPaginationControls(forceQuery);\r\n            if (!controls) return null;\r\n\r\n            const leftGroup = controls.querySelector('.d-flex.flex-row.h-100:first-of-type');\r\n            const buttons = leftGroup?.querySelectorAll('.pagination-button');\r\n            return buttons?.[1] ?? null;\r\n        };\r\n\r\n        /**\r\n         * Gets the fast backward button\r\n         */\r\n        manager.getFastBackward = (forceQuery = false) => {\r\n            const controls = manager.getPaginationControls(forceQuery);\r\n            if (!controls) return null;\r\n\r\n            const fastBackwardClass = manager.getClassName('fastBackwardButton');\r\n            return controls.querySelector(`.${fastBackwardClass}`)?.closest('.pagination-button') ?? null;\r\n        };\r\n\r\n        /**\r\n         * Gets the next page button\r\n         */\r\n        manager.getNext = (forceQuery = false) => {\r\n            const controls = manager.getPaginationControls(forceQuery);\r\n            if (!controls) return null;\r\n\r\n            const rightGroup = controls.querySelector('.d-flex.flex-row.h-100:last-of-type');\r\n            const buttons = rightGroup?.querySelectorAll('.pagination-button');\r\n            return buttons?.[0] ?? null;\r\n        };\r\n\r\n        /**\r\n         * Gets the fast forward button\r\n         */\r\n        manager.getFastForward = (forceQuery = false) => {\r\n            const controls = manager.getPaginationControls(forceQuery);\r\n            if (!controls) return null;\r\n\r\n            const fastForwardClass = manager.getClassName('fastForwardButton');\r\n            return controls.querySelector(`.${fastForwardClass}`)?.closest('.pagination-button') ?? null;\r\n        };\r\n\r\n        // DOM MANIPULATION METHODS\r\n\r\n        /**\r\n         * Updates the current page text\r\n         */\r\n        manager.setCurrentPageText = function (page) {\r\n            const currentPageEl = this.getCurrentPage();\r\n            if (!currentPageEl) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                currentPageEl.textContent = page;\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Updates the max page text\r\n         */\r\n        manager.setMaxPageText = function (totalPages) {\r\n            const maxPageEl = this.getMaxPage();\r\n            if (!maxPageEl) return;\r\n\r\n            const text = `${totalPages} page${totalPages !== 1 ? 's' : ''}`;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                maxPageEl.textContent = text;\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Updates the button states based on page position\r\n         */\r\n        manager.updateButtonStates = function (currentPage, totalPages) {\r\n            const buttons = {\r\n                prev: this.getPrevious(),\r\n                fastBack: this.getFastBackward(),\r\n                next: this.getNext(),\r\n                fastForward: this.getFastForward()\r\n            };\r\n\r\n            // Skip if no buttons found\r\n            if (!buttons.prev && !buttons.fastBack && !buttons.next && !buttons.fastForward) {\r\n                return;\r\n            }\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                // First/prev buttons are disabled on first page\r\n                if (buttons.prev) buttons.prev.classList.toggle('disabled', currentPage <= 1);\r\n                if (buttons.fastBack) buttons.fastBack.classList.toggle('disabled', currentPage <= 1);\r\n\r\n                // Next/last buttons are disabled on last page\r\n                if (buttons.next) buttons.next.classList.toggle('disabled', currentPage >= totalPages);\r\n                if (buttons.fastForward) buttons.fastForward.classList.toggle('disabled', currentPage >= totalPages);\r\n            });\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        initialize(container) {\r\n            if (!instance) instance = createPaginationManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance() {\r\n            return instance;\r\n        },\r\n\r\n        // Element access methods\r\n        getPaginationControls: forceQuery => instance?.getPaginationControls(forceQuery) ?? null,\r\n        getPaginationInfo: forceQuery => instance?.getPaginationInfo(forceQuery) ?? null,\r\n        getCurrentPage: forceQuery => instance?.getCurrentPage(forceQuery) ?? null,\r\n        getMaxPage: forceQuery => instance?.getMaxPage(forceQuery) ?? null,\r\n        getPrevious: forceQuery => instance?.getPrevious(forceQuery) ?? null,\r\n        getFastBackward: forceQuery => instance?.getFastBackward(forceQuery) ?? null,\r\n        getNext: forceQuery => instance?.getNext(forceQuery) ?? null,\r\n        getFastForward: forceQuery => instance?.getFastForward(forceQuery) ?? null,\r\n\r\n        // DOM manipulation methods\r\n        setCurrentPageText: page => {\r\n            if (instance) instance.setCurrentPageText(page);\r\n        },\r\n        setMaxPageText: totalPages => {\r\n            if (instance) instance.setMaxPageText(totalPages);\r\n        },\r\n        updateButtonStates: (currentPage, totalPages) => {\r\n            if (instance) instance.updateButtonStates(currentPage, totalPages);\r\n        },\r\n\r\n        // Base methods\r\n        getClassName: key => instance?.getClassName(key) ?? '',\r\n        clearCache: () => instance?.clearCache()\r\n    };\r\n})();","/**\r\n * @title RowElementManager\r\n * @description  Manages row-specific elements and DOM operations\r\n * @author Daniel Oliveira\r\n */\r\nconst RowElementManager = (function () {\r\n    let instance = null;\r\n\r\n    // Define supported columns at module level\r\n    const SUPPORTED_COLUMNS = [\r\n        'Name',\r\n        'File Path',\r\n        'Profile Name',\r\n        'Length',\r\n        'Front-cut Off Distance',\r\n        'Square-up Distance'\r\n    ];\r\n\r\n    function createRowElementManager(container) {\r\n        const manager = BaseElementManager.createElementManager('row', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            tableRow: 'table-row',\r\n            columnCell: 'column-cell',\r\n            containerAllRows: 'container-all-rows'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // ELEMENT ACCESS METHODS\r\n        manager.getRowInsertionPoint = (forceQuery = false) =>\r\n            manager.getElement(`.${manager.getClassName('containerAllRows')}`, \"getRowInsertionPoint()\", forceQuery);\r\n\r\n        manager.getAllRows = function (forceQuery = false) {\r\n            const container = this.getRowInsertionPoint(forceQuery);\r\n            return container ? container.querySelectorAll(`.${this.getClassName('tableRow')}`) : [];\r\n        };\r\n\r\n        manager.getRowByIndex = function (index, forceQuery = false) {\r\n            const rows = this.getAllRows(forceQuery);\r\n            return (index >= 0 && index < rows.length) ? rows[index] : null;\r\n        };\r\n\r\n        manager.getRowCount = forceQuery => manager.getAllRows(forceQuery).length;\r\n\r\n        manager.getCellsForRow = row =>\r\n            row ? row.querySelectorAll(`.${manager.getClassName('columnCell')}`) : [];\r\n\r\n        // CLASS NAME GETTERS\r\n        manager.getTableRowClass = () => manager.getClassName('tableRow');\r\n        manager.getColumnCellClass = () => manager.getClassName('columnCell');\r\n        manager.getContainerAllRowsClass = () => manager.getClassName('containerAllRows');\r\n\r\n        // ELEMENT CREATION METHODS\r\n\r\n        /**\r\n         * Creates a cell template\r\n         */\r\n        manager.createCellTemplate = function (cellData = '') {\r\n            const cell = document.createElement('div');\r\n            cell.classList.add(this.getClassName('columnCell'));\r\n            return cell;\r\n        };\r\n\r\n        /**\r\n         * Creates a dropdown arrow for a row\r\n         */\r\n        manager.createDropdownArrow = function () {\r\n            const dropdownArrow = document.createElement('div');\r\n            dropdownArrow.classList.add('table-row-dropdown-arrow');\r\n            return dropdownArrow;\r\n        };\r\n\r\n        /**\r\n         * Creates an attribute pair for the detail panel\r\n         */\r\n        manager.createAttributePair = function (attr) {\r\n            const attributePair = document.createElement('div');\r\n            attributePair.className = 'attribute-pair';\r\n\r\n            const nameElement = document.createElement('span');\r\n            nameElement.className = 'attribute-name';\r\n            nameElement.textContent = attr.name + ': ';\r\n\r\n            const valueElement = document.createElement('span');\r\n            valueElement.className = 'attribute-value';\r\n            valueElement.textContent = attr.value;\r\n\r\n            attributePair.appendChild(nameElement);\r\n            attributePair.appendChild(valueElement);\r\n\r\n            return attributePair;\r\n        };\r\n\r\n        /**\r\n         * Adds row styles to the document (once)\r\n         */\r\n        manager.addRowStyles = function () {\r\n            if (document.getElementById('row-manager-styles')) return;\r\n\r\n            const style = document.createElement('style');\r\n            style.id = 'row-manager-styles';\r\n            style.textContent = `\r\n.${this.getClassName('tableRow')} {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n.${this.getClassName('columnCell')} {\r\n    flex-grow: 1;\r\n}\r\n.table-row-dropdown-arrow {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 10px;\r\n    width: 8px;\r\n    height: 8px;\r\n    border-right: 2px solid #666;\r\n    border-bottom: 2px solid #666;\r\n    transform: rotate(45deg);\r\n    transition: transform 0.3s ease;\r\n    z-index: 500;\r\n}\r\n.table-row-dropdown-arrow.table-row-dropdown-open {\r\n    transform: rotate(-135deg);\r\n}\r\n.detail-panel {\r\n    flex-basis: 100%;\r\n    overflow: hidden;\r\n    max-height: 0;\r\n    transition: max-height 0.3s ease-in-out;\r\n    box-sizing: border-box;\r\n    border-top: 1px solid #ddd;\r\n    order: 999; /* Ensures it always appears after all cells */\r\n}\r\n\r\n/* Apply the same color convention to the detail panels as their parent rows */\r\n .detail-panel {\r\n    background-color:  #F1F2F4;\r\n   \r\n}\r\n\r\n.detail-panel.expanded {\r\n    max-height: 180px;\r\n    height: 180px;\r\n}\r\n.detail-content {\r\n    padding: 12px 16px;\r\n   \r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.detail-header {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    padding-bottom: 6px;\r\n}\r\n\r\n.detail-title {\r\n    font-size: 12px;\r\n    font-weight: 400;\r\n    color: #86868b;\r\n    letter-spacing: 0.01em;\r\n    padding-top: 12.5px;\r\n}\r\n\r\n.attributes-layout {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0px 32px;\r\n    width: 100%;\r\n    padding: 4px 0;\r\n}\r\n\r\n.attribute-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: auto;\r\n    width: 350px;\r\n}\r\n\r\n.attribute-pair {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: baseline;\r\n    height: auto;\r\n    width: auto;\r\n}\r\n\r\n.attribute-name {\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    color: #6B778C;\r\n    letter-spacing: 0.01em;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    padding-right: 8px;\r\n    width: 50%;\r\n}\r\n\r\n.attribute-value {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    color: #1d1d1f;\r\n    word-break: break-word;\r\n    overflow-wrap: break-word;\r\n    width: 50%;\r\n    padding-left: 8px;\r\n    border-left: 1px solid #E9EBEE;\r\n}\r\n\r\n/* Row interactivity disabled state */\r\n.rows-not-interactive {\r\n    pointer-events: none;\r\n}\r\n.rows-not-interactive .table-row-dropdown-arrow {\r\n    display: none !important;\r\n}`;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                document.head.appendChild(style);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Creates a basic row element\r\n         */\r\n        manager.createBaseRow = function (columnCount) {\r\n            // Create row element\r\n            const row = document.createElement('div');\r\n            row.classList.add(this.getClassName('tableRow'));\r\n            row.style.position = \"relative\";\r\n            row.dataset.expanded = \"false\";\r\n\r\n            // Create dropdown arrow\r\n            const dropdownArrow = this.createDropdownArrow();\r\n            row.appendChild(dropdownArrow);\r\n\r\n            // Create and append cells \r\n            for (let i = 0; i < columnCount; i++) {\r\n                row.appendChild(this.createCellTemplate());\r\n            }\r\n\r\n            return row;\r\n        };\r\n\r\n        /**\r\n         * Creates a detail panel with error message\r\n         */\r\n        manager.createErrorDetailPanel = function (errorMessage) {\r\n            const detailPanel = document.createElement('div');\r\n            detailPanel.className = 'detail-panel';\r\n\r\n            const errorContent = document.createElement('div');\r\n            errorContent.className = 'detail-content';\r\n            errorContent.textContent = errorMessage || 'Unable to load additional information.';\r\n            errorContent.style.color = 'red';\r\n\r\n            detailPanel.appendChild(errorContent);\r\n            return detailPanel;\r\n        };\r\n\r\n        /**\r\n         * Creates a detail panel with row data\r\n         */\r\n        manager.createDetailPanel = function (rowData, displayedColumns) {\r\n            // Create detail panel\r\n            const detailPanel = document.createElement('div');\r\n            detailPanel.className = 'detail-panel';\r\n\r\n            // Create content container\r\n            const detailContent = document.createElement('div');\r\n            detailContent.className = 'detail-content';\r\n\r\n            // Create header\r\n            const detailHeader = document.createElement('div');\r\n            detailHeader.className = 'detail-header';\r\n\r\n            const detailTitle = document.createElement('div');\r\n            detailTitle.className = 'detail-title';\r\n            detailTitle.textContent = 'Additional Information';\r\n\r\n            detailHeader.appendChild(detailTitle);\r\n            detailContent.appendChild(detailHeader);\r\n\r\n            // Create layout for attribute pairs\r\n            const attributesLayout = document.createElement('div');\r\n            attributesLayout.className = 'attributes-layout';\r\n\r\n            // Find attributes not currently displayed\r\n            const hiddenAttributes = SUPPORTED_COLUMNS.filter(\r\n                col => !displayedColumns.includes(col)\r\n            );\r\n\r\n            // Create attribute groups\r\n            if (hiddenAttributes.length === 0) {\r\n                // If no hidden attributes, show a message\r\n                const messageElem = document.createElement('div');\r\n                messageElem.textContent = 'All available information is already displayed in the table.';\r\n                messageElem.style.fontStyle = 'italic';\r\n                messageElem.style.color = '#666';\r\n                attributesLayout.appendChild(messageElem);\r\n            } else {\r\n                // Group attributes into pairs\r\n                for (let i = 0; i < hiddenAttributes.length; i += 2) {\r\n                    const attributeGroup = document.createElement('div');\r\n                    attributeGroup.className = 'attribute-group';\r\n\r\n                    // Add first attribute\r\n                    const attr1 = hiddenAttributes[i];\r\n                    attributeGroup.appendChild(this.createAttributePair({\r\n                        name: attr1,\r\n                        value: rowData[attr1] || 'N/A'\r\n                    }));\r\n\r\n                    // Add second attribute if available\r\n                    if (i + 1 < hiddenAttributes.length) {\r\n                        const attr2 = hiddenAttributes[i + 1];\r\n                        attributeGroup.appendChild(this.createAttributePair({\r\n                            name: attr2,\r\n                            value: rowData[attr2] || 'N/A'\r\n                        }));\r\n                    }\r\n\r\n                    attributesLayout.appendChild(attributeGroup);\r\n                }\r\n            }\r\n\r\n            detailContent.appendChild(attributesLayout);\r\n            detailPanel.appendChild(detailContent);\r\n\r\n            return detailPanel;\r\n        };\r\n\r\n        /**\r\n         * Creates a template for a row with all functionality\r\n         */\r\n        manager.createRowTemplate = function (columnCount) {\r\n            // Add styles to document (once)\r\n            this.addRowStyles();\r\n\r\n            // Create base row\r\n            const row = this.createBaseRow(columnCount);\r\n\r\n            // Add cell method for row\r\n            this._addCellMethod(row);\r\n\r\n            // Set initial interactivity state\r\n            this._setInitialRowInteractivity(row);\r\n\r\n            // Set up delegation if not already done\r\n            if (!this._delegationInitialized) {\r\n                this._setupRowDelegation();\r\n            }\r\n\r\n            return row;\r\n        };\r\n\r\n        /**\r\n         * Adds the addCell method to a row\r\n         */\r\n        manager._addCellMethod = function (row) {\r\n            const mgr = this;\r\n\r\n            row.addCell = function (cellData) {\r\n                // Get the detail panel if it exists\r\n                const detailPanel = this.querySelector('.detail-panel');\r\n\r\n                // Create the new cell\r\n                const newCell = mgr.createCellTemplate(cellData);\r\n\r\n                // If there's a detail panel, insert before it, otherwise just append\r\n                if (detailPanel) {\r\n                    this.insertBefore(newCell, detailPanel);\r\n                } else {\r\n                    this.appendChild(newCell);\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Sets initial row interactivity based on displayed columns\r\n         */\r\n        manager._setInitialRowInteractivity = function (row) {\r\n            const shouldBeInteractive = !this._areAllColumnsDisplayed();\r\n            const dropdownArrow = row.querySelector('.table-row-dropdown-arrow');\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                row.style.cursor = shouldBeInteractive ? 'pointer' : 'default';\r\n                if (dropdownArrow) {\r\n                    dropdownArrow.style.display = shouldBeInteractive ? 'block' : 'none';\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Checks if all supported columns are displayed\r\n         */\r\n        manager._areAllColumnsDisplayed = function () {\r\n            const currentColumns = ColumnElementManager.getColumnHeaders();\r\n            return SUPPORTED_COLUMNS.every(col => currentColumns.includes(col));\r\n        };\r\n\r\n        /**\r\n         * Sets up row click delegation\r\n         */\r\n        manager._setupRowDelegation = function () {\r\n            const container = this.getRowInsertionPoint();\r\n            if (!container) return;\r\n\r\n            const mgr = this;\r\n\r\n            // Remove rows-not-interactive class if present\r\n            container.classList.remove('rows-not-interactive');\r\n\r\n            // Add single event listener for row clicks\r\n            container.addEventListener('click', function (event) {\r\n                // Check if all columns are displayed (we should disable clicks if they are)\r\n                if (mgr._areAllColumnsDisplayed()) return;\r\n\r\n                // Find the closest row\r\n                const row = event.target.closest('.' + mgr.getClassName('tableRow'));\r\n                if (!row) return;\r\n\r\n                // Handle row click\r\n                mgr._handleRowClick(row);\r\n            });\r\n\r\n            // Set up column change watchers\r\n            this._setupColumnChangeListeners();\r\n\r\n            // Mark as initialized\r\n            this._delegationInitialized = true;\r\n        };\r\n\r\n        /**\r\n         * Handles a row click event\r\n         */\r\n        manager._handleRowClick = function (row) {\r\n            const rowIndex = Array.from(this.getAllRows()).indexOf(row);\r\n\r\n            // Toggle expanded state\r\n            const isExpanded = row.dataset.expanded === \"true\";\r\n            const newState = !isExpanded;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                row.dataset.expanded = newState ? \"true\" : \"false\";\r\n\r\n                // Toggle dropdown arrow\r\n                const dropdownArrow = row.querySelector('.table-row-dropdown-arrow');\r\n                if (dropdownArrow) {\r\n                    dropdownArrow.classList.toggle('table-row-dropdown-open', newState);\r\n                }\r\n            });\r\n\r\n            // Handle detail panel\r\n            if (newState) {\r\n                this._expandRowDetailPanel(row, rowIndex);\r\n            } else {\r\n                this._collapseRowDetailPanel(row);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Expands a row's detail panel\r\n         */\r\n        manager._expandRowDetailPanel = function (row, rowIndex) {\r\n            // Remove existing panel if it exists\r\n            let detailPanel = row.querySelector('.detail-panel');\r\n            if (detailPanel) {\r\n                row.removeChild(detailPanel);\r\n            }\r\n\r\n            // Get current page\r\n            const currentPageEl = PaginationElementManager.getCurrentPage();\r\n            const currentPage = currentPageEl ? parseInt(currentPageEl.textContent) || 1 : 1;\r\n\r\n            // Fetch data for this row\r\n            TableDataModule.getPageData(\r\n                currentPage,\r\n                RowManagerModule.getRowCount(),\r\n                SUPPORTED_COLUMNS\r\n            ).then(data => {\r\n                if (!data || !Array.isArray(data) || !data[rowIndex]) {\r\n                    console.error('No data available for row', rowIndex);\r\n                    return;\r\n                }\r\n\r\n                // Create detail panel with the row data\r\n                const rowData = data[rowIndex];\r\n                const displayedColumns = ColumnElementManager.getColumnHeaders();\r\n                detailPanel = this.createDetailPanel(rowData, displayedColumns);\r\n\r\n                // Add to row and animate\r\n                this._animateDetailPanelOpen(row, detailPanel);\r\n            }).catch(err => {\r\n                console.error('Error fetching row data:', err);\r\n\r\n                // Create error panel\r\n                detailPanel = this.createErrorDetailPanel();\r\n\r\n                // Add to row and animate\r\n                this._animateDetailPanelOpen(row, detailPanel);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Collapses a row's detail panel\r\n         */\r\n        manager._collapseRowDetailPanel = function (row) {\r\n            const detailPanel = row.querySelector('.detail-panel');\r\n            if (!detailPanel) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                detailPanel.classList.remove('expanded');\r\n            });\r\n\r\n            // Remove panel after transition completes\r\n            setTimeout(() => {\r\n                if (detailPanel.parentNode === row) {\r\n                    DOMUtils.batchUpdate(() => {\r\n                        row.removeChild(detailPanel);\r\n                    });\r\n                }\r\n            }, 300);\r\n        };\r\n\r\n        /**\r\n         * Animates a detail panel opening\r\n         */\r\n        manager._animateDetailPanelOpen = function (row, detailPanel) {\r\n            DOMUtils.batchUpdate(() => {\r\n                row.appendChild(detailPanel);\r\n\r\n                // Force reflow to enable transition\r\n                detailPanel.offsetHeight;\r\n                detailPanel.classList.add('expanded');\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Sets up listeners for column changes\r\n         */\r\n        manager._setupColumnChangeListeners = function () {\r\n            document.addEventListener('columnHeaders:refreshed', () => {\r\n                this._updateRowInteractivity();\r\n                this._refreshOpenDetailPanels();\r\n            });\r\n\r\n            document.addEventListener('columnManager:columnAdded', () => {\r\n                this._updateRowInteractivity();\r\n                this._refreshOpenDetailPanels();\r\n            });\r\n\r\n            document.addEventListener('columnManager:columnDeleted', () => {\r\n                this._updateRowInteractivity();\r\n                this._refreshOpenDetailPanels();\r\n            });\r\n\r\n            document.addEventListener('columnTitle:changed', () => {\r\n                this._updateRowInteractivity();\r\n                this._refreshOpenDetailPanels();\r\n            });\r\n\r\n            // Trigger a manual update immediately after initialization\r\n            setTimeout(() => this._updateRowInteractivity(), 0);\r\n        };\r\n\r\n        /**\r\n         * Updates row interactivity based on displayed columns\r\n         */\r\n        manager._updateRowInteractivity = function () {\r\n            const container = this.getRowInsertionPoint();\r\n            if (!container) return;\r\n\r\n            const allRows = this.getAllRows();\r\n            const shouldBeInteractive = !this._areAllColumnsDisplayed();\r\n\r\n            // Update container class\r\n            DOMUtils.batchUpdate(() => {\r\n                container.classList.toggle('rows-not-interactive', !shouldBeInteractive);\r\n            });\r\n\r\n            // If not interactive, collapse any expanded rows\r\n            if (!shouldBeInteractive) {\r\n                allRows.forEach(row => {\r\n                    if (row.dataset.expanded === \"true\") {\r\n                        this.collapseExpandedRow(row);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Update individual row styling\r\n            allRows.forEach(row => {\r\n                DOMUtils.batchUpdate(() => {\r\n                    // Update cursor style\r\n                    row.style.cursor = shouldBeInteractive ? 'pointer' : 'default';\r\n\r\n                    // Update arrow visibility\r\n                    const arrow = row.querySelector('.table-row-dropdown-arrow');\r\n                    if (arrow) {\r\n                        arrow.style.display = shouldBeInteractive ? 'block' : 'none';\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Refreshes open detail panels with updated data\r\n         */\r\n        manager._refreshOpenDetailPanels = function () {\r\n            const allRows = this.getAllRows();\r\n            const displayedColumns = ColumnElementManager.getColumnHeaders();\r\n\r\n            // Get current page\r\n            const currentPageEl = PaginationElementManager.getCurrentPage();\r\n            const currentPage = currentPageEl ? parseInt(currentPageEl.textContent) || 1 : 1;\r\n\r\n            // Find rows with expanded panels\r\n            allRows.forEach((row, rowIndex) => {\r\n                if (row.dataset.expanded !== \"true\") return;\r\n\r\n                const detailPanel = row.querySelector('.detail-panel');\r\n                if (!detailPanel) return;\r\n\r\n                // Fetch fresh data\r\n                TableDataModule.getPageData(\r\n                    currentPage,\r\n                    RowManagerModule.getRowCount(),\r\n                    SUPPORTED_COLUMNS\r\n                ).then(data => {\r\n                    if (!data || !Array.isArray(data) || !data[rowIndex]) {\r\n                        console.error('No data available for row', rowIndex);\r\n                        return;\r\n                    }\r\n\r\n                    const rowData = data[rowIndex];\r\n                    this._updateDetailPanelContent(detailPanel, rowData, displayedColumns);\r\n                }).catch(err => {\r\n                    console.error('Error refreshing detail panel data:', err);\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Updates the content of an existing detail panel\r\n         */\r\n        manager._updateDetailPanelContent = function (detailPanel, rowData, displayedColumns) {\r\n            // Find attributes layout\r\n            let attributesLayout = detailPanel.querySelector('.attributes-layout');\r\n            if (!attributesLayout) {\r\n                const detailContent = detailPanel.querySelector('.detail-content');\r\n                if (!detailContent) return;\r\n\r\n                attributesLayout = document.createElement('div');\r\n                attributesLayout.className = 'attributes-layout';\r\n                detailContent.appendChild(attributesLayout);\r\n            }\r\n\r\n            // Clear existing content\r\n            DOMUtils.batchUpdate(() => {\r\n                attributesLayout.innerHTML = '';\r\n\r\n                // Find attributes not currently displayed\r\n                const hiddenAttributes = SUPPORTED_COLUMNS.filter(\r\n                    col => !displayedColumns.includes(col)\r\n                );\r\n\r\n                // Create attribute groups\r\n                if (hiddenAttributes.length === 0) {\r\n                    // If no hidden attributes, show a message\r\n                    const messageElem = document.createElement('div');\r\n                    messageElem.textContent = 'All available information is already displayed in the table.';\r\n                    messageElem.style.fontStyle = 'italic';\r\n                    messageElem.style.color = '#666';\r\n                    attributesLayout.appendChild(messageElem);\r\n                } else {\r\n                    // Group attributes into pairs\r\n                    for (let i = 0; i < hiddenAttributes.length; i += 2) {\r\n                        const attributeGroup = document.createElement('div');\r\n                        attributeGroup.className = 'attribute-group';\r\n\r\n                        // Add first attribute\r\n                        const attr1 = hiddenAttributes[i];\r\n                        attributeGroup.appendChild(this.createAttributePair({\r\n                            name: attr1,\r\n                            value: rowData[attr1] || 'N/A'\r\n                        }));\r\n\r\n                        // Add second attribute if available\r\n                        if (i + 1 < hiddenAttributes.length) {\r\n                            const attr2 = hiddenAttributes[i + 1];\r\n                            attributeGroup.appendChild(this.createAttributePair({\r\n                                name: attr2,\r\n                                value: rowData[attr2] || 'N/A'\r\n                            }));\r\n                        }\r\n\r\n                        attributesLayout.appendChild(attributeGroup);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        // DOM MANIPULATION METHODS\r\n\r\n        /**\r\n         * Adds multiple rows to a container using a document fragment\r\n         */\r\n        manager.appendRows = function (rows, container) {\r\n            if (!rows || !rows.length || !container) return;\r\n\r\n            const fragment = document.createDocumentFragment();\r\n            rows.forEach(row => fragment.appendChild(row));\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                container.appendChild(fragment);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Removes the last N rows from a container\r\n         */\r\n        manager.removeLastNRows = function (count, container) {\r\n            if (!container || count <= 0) return [];\r\n\r\n            const removedRows = [];\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                for (let i = 0; i < count; i++) {\r\n                    if (container.lastChild) {\r\n                        removedRows.push(container.lastChild);\r\n                        container.removeChild(container.lastChild);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return removedRows;\r\n        };\r\n\r\n        /**\r\n         * Clears the content of all provided rows\r\n         */\r\n        manager.clearRowsContent = function (rows) {\r\n            if (!rows || !rows.length) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach(row => {\r\n                    const cells = this.getCellsForRow(row);\r\n                    cells.forEach(cell => {\r\n                        cell.textContent = '';\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Collapses an expanded row\r\n         */\r\n        manager.collapseExpandedRow = function (row) {\r\n            if (!row || row.dataset.expanded !== \"true\") return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                // Set expanded state to false\r\n                row.dataset.expanded = \"false\";\r\n\r\n                // Remove arrow open class\r\n                const dropdownArrow = row.querySelector('.table-row-dropdown-arrow');\r\n                if (dropdownArrow) {\r\n                    dropdownArrow.classList.remove('table-row-dropdown-open');\r\n                }\r\n\r\n                // Find and collapse detail panel\r\n                const detailPanel = row.querySelector('.detail-panel');\r\n                if (detailPanel) {\r\n                    detailPanel.classList.remove('expanded');\r\n                }\r\n            });\r\n\r\n            // Remove panel after transition completes\r\n            if (row.querySelector('.detail-panel')) {\r\n                setTimeout(() => {\r\n                    const detailPanel = row.querySelector('.detail-panel');\r\n                    if (detailPanel && detailPanel.parentNode === row) {\r\n                        DOMUtils.batchUpdate(() => {\r\n                            row.removeChild(detailPanel);\r\n                        });\r\n                    }\r\n                }, 300);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Creates cells for columns across all rows\r\n         */\r\n        manager.createCellsForColumns = function (columnCount) {\r\n            const rows = this.getAllRows(true);\r\n            const createdCells = [];\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach(row => {\r\n                    for (let j = 0; j < columnCount; j++) {\r\n                        const cell = this.createCellTemplate('');\r\n                        row.appendChild(cell);\r\n                        createdCells.push(cell);\r\n                    }\r\n                });\r\n            });\r\n\r\n            return createdCells;\r\n        };\r\n\r\n        /**\r\n         * Removes cells at a specific column index from all rows\r\n         */\r\n        manager.removeCellsAtColumnIndex = function (columnIndex) {\r\n            const rows = this.getAllRows(true);\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach(row => {\r\n                    const cells = this.getCellsForRow(row);\r\n                    if (cells?.length > columnIndex) {\r\n                        cells[columnIndex].remove();\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        // Set module-level SUPPORTED_COLUMNS reference\r\n        manager.SUPPORTED_COLUMNS = SUPPORTED_COLUMNS;\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        // Initialization\r\n        initialize(container) {\r\n            if (!instance) instance = createRowElementManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance() {\r\n            return instance;\r\n        },\r\n\r\n        // Element access methods\r\n        getRowInsertionPoint: forceQuery => instance?.getRowInsertionPoint(forceQuery) ?? null,\r\n        getAllRows: forceQuery => instance?.getAllRows(forceQuery) ?? [],\r\n        getRowByIndex: (index, forceQuery) => instance?.getRowByIndex(index, forceQuery) ?? null,\r\n        getRowCount: forceQuery => instance?.getRowCount(forceQuery) ?? 0,\r\n        getCellsForRow: row => instance?.getCellsForRow(row) ?? [],\r\n\r\n        // Class name getters\r\n        getTableRowClass: () => instance?.getTableRowClass() ?? 'table-row',\r\n        getColumnCellClass: () => instance?.getColumnCellClass() ?? 'column-cell',\r\n        getContainerAllRowsClass: () => instance?.getContainerAllRowsClass() ?? 'container-all-rows',\r\n\r\n        // Element creation methods\r\n        createRowTemplate: (columnCount, cellData) => instance?.createRowTemplate(columnCount, cellData) ?? null,\r\n        createCellTemplate: cellData => instance?.createCellTemplate(cellData) ?? null,\r\n        createAttributePair: attr => instance?.createAttributePair(attr) ?? null,\r\n\r\n        // DOM manipulation methods\r\n        appendRows: (rows, container) => {\r\n            if (instance) instance.appendRows(rows, container);\r\n        },\r\n        removeLastNRows: (count, container) => {\r\n            if (instance) return instance.removeLastNRows(count, container);\r\n            return [];\r\n        },\r\n        clearRowsContent: (rows) => {\r\n            if (instance) instance.clearRowsContent(rows);\r\n        },\r\n        collapseExpandedRow: (row) => {\r\n            if (instance) instance.collapseExpandedRow(row);\r\n        },\r\n        createCellsForColumns: (columnCount) => instance?.createCellsForColumns(columnCount) ?? [],\r\n        removeCellsAtColumnIndex: (columnIndex) => instance?.removeCellsAtColumnIndex(columnIndex),\r\n\r\n        // Base methods\r\n        setClassName: (key, value) => instance?.setClassName(key, value),\r\n        getClassName: key => instance?.getClassName(key) ?? null,\r\n        clearCache: () => instance?.clearCache(),\r\n\r\n        // Module constants\r\n        SUPPORTED_COLUMNS\r\n    };\r\n})();","/**\r\n * @title SearchElementManager\r\n * @description   Manages search-related elements\r\n * @author Daniel Oliveira\r\n */\r\nconst SearchElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createSearchManager(container) {\r\n        const manager = BaseElementManager.createElementManager('search', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            searchInput: 'search-input',\r\n            clearButton: 'clear-button',\r\n            searchContainer: 'search-text',\r\n            searchIcon: 'search-icon',\r\n            searchArea: 'data-table__search',\r\n            searchResults: 'search-results-container',\r\n            hidden: 'd-none'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // ELEMENT ACCESS METHODS\r\n        manager.getSearchInput = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('searchInput')}`, \"getSearchInput()\", forceQuery);\r\n\r\n        manager.getClearIcon = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('clearButton')}`, \"getClearIcon()\", forceQuery);\r\n\r\n        manager.getSearchContainer = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('searchContainer')}`, \"getSearchContainer()\", forceQuery);\r\n\r\n        manager.getSearchIcon = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('searchIcon')}`, \"getSearchIcon()\", forceQuery);\r\n\r\n        manager.getSearchArea = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('searchArea')}`, \"getSearchArea()\", forceQuery);\r\n\r\n        manager.getSearchResultsContainer = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('searchResults')}`, \"getSearchResultsContainer()\", forceQuery);\r\n\r\n        manager.getHiddenClass = () => manager.getClassName('hidden');\r\n\r\n        // DOM MANIPULATION METHODS\r\n        manager.updatePlaceholder = function (input, placeholderText) {\r\n            if (!input) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                input.placeholder = placeholderText;\r\n            });\r\n        };\r\n\r\n        manager.updateClearButtonVisibility = function (clearButton, isVisible) {\r\n            if (!clearButton) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                if (isVisible) {\r\n                    clearButton.classList.remove(this.getClassName('hidden'));\r\n                } else {\r\n                    clearButton.classList.add(this.getClassName('hidden'));\r\n                }\r\n            });\r\n        };\r\n\r\n        manager.clearSearchInput = function (input, clearButton, container) {\r\n            if (!input) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                input.value = '';\r\n\r\n                if (clearButton) {\r\n                    clearButton.classList.add(this.getClassName('hidden'));\r\n                }\r\n\r\n                if (container) {\r\n                    container.textContent = '';\r\n                }\r\n            });\r\n        };\r\n\r\n        manager.setSearchResultText = function (container, text) {\r\n            if (!container) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                container.textContent = text;\r\n            });\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        initialize(container) {\r\n            if (!instance) instance = createSearchManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance: () => instance,\r\n\r\n        // Element access methods\r\n        getSearchInput: forceQuery => instance?.getSearchInput(forceQuery) ?? null,\r\n        getClearIcon: forceQuery => instance?.getClearIcon(forceQuery) ?? null,\r\n        getSearchContainer: forceQuery => instance?.getSearchContainer(forceQuery) ?? null,\r\n        getSearchIcon: forceQuery => instance?.getSearchIcon(forceQuery) ?? null,\r\n        getSearchArea: forceQuery => instance?.getSearchArea(forceQuery) ?? null,\r\n        getSearchResultsContainer: forceQuery => instance?.getSearchResultsContainer(forceQuery) ?? null,\r\n        getHiddenClass: () => instance?.getHiddenClass() ?? 'd-none',\r\n\r\n        // DOM manipulation methods\r\n        updatePlaceholder: (input, placeholderText) => {\r\n            if (instance) instance.updatePlaceholder(input, placeholderText);\r\n        },\r\n        updateClearButtonVisibility: (clearButton, isVisible) => {\r\n            if (instance) instance.updateClearButtonVisibility(clearButton, isVisible);\r\n        },\r\n        clearSearchInput: (input, clearButton, container) => {\r\n            if (instance) instance.clearSearchInput(input, clearButton, container);\r\n        },\r\n        setSearchResultText: (container, text) => {\r\n            if (instance) instance.setSearchResultText(container, text);\r\n        },\r\n\r\n        // Base methods\r\n        clearCache: () => instance?.clearCache()\r\n    };\r\n})();","/**\r\n * @title SortIndicatorElementManager\r\n * @description   Manages sort indicator elements\r\n * @author Daniel Oliveira\r\n */\r\nconst SortIndicatorElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createSortIndicatorElementManager(container) {\r\n        const manager = BaseElementManager.createElementManager('sortIndicator', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            sortIndicatorsClass: 'sort-indicators',\r\n            triangleUpClass: 'triangle-up',\r\n            triangleDownClass: 'triangle-down',\r\n            disabledClass: 'disabled'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // CLASS NAME GETTERS\r\n        manager.getSortIndicatorsClass = () => manager.getClassName('sortIndicatorsClass');\r\n        manager.getTriangleUpClass = () => manager.getClassName('triangleUpClass');\r\n        manager.getTriangleDownClass = () => manager.getClassName('triangleDownClass');\r\n        manager.getDisabledClass = () => manager.getClassName('disabledClass');\r\n\r\n        // ELEMENT CREATION METHODS\r\n        manager.createSortIndicatorTemplate = function () {\r\n            // Create container\r\n            const sortIndicators = document.createElement('div');\r\n            sortIndicators.className = this.getClassName('sortIndicatorsClass');\r\n\r\n            // Create triangles\r\n            const upTriangle = document.createElement('span');\r\n            upTriangle.className = `${this.getClassName('triangleUpClass')} ${this.getClassName('disabledClass')}`;\r\n            upTriangle.style.cursor = 'pointer';\r\n            upTriangle.style.scale = 1.5;\r\n\r\n            const downTriangle = document.createElement('span');\r\n            downTriangle.className = `${this.getClassName('triangleDownClass')} ${this.getClassName('disabledClass')}`;\r\n            downTriangle.style.cursor = 'pointer';\r\n            downTriangle.style.scale = 1.5;\r\n\r\n            // Assemble and style\r\n            sortIndicators.appendChild(upTriangle);\r\n            sortIndicators.appendChild(downTriangle);\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                sortIndicators.style.gap = '10px';\r\n                sortIndicators.style.marginBottom = '6px';\r\n                sortIndicators.style.display = 'flex';\r\n            });\r\n\r\n            return sortIndicators;\r\n        };\r\n\r\n        manager.createSortPlaceholder = function () {\r\n            const placeholder = document.createElement('div');\r\n            placeholder.className = 'sort-indicator-placeholder';\r\n            return placeholder;\r\n        };\r\n\r\n        // DOM MANIPULATION METHODS\r\n        manager.setTriangleState = function (element, direction, isActive) {\r\n            if (!element) return;\r\n\r\n            const upTriangle = element.querySelector(`.${this.getClassName('triangleUpClass')}`);\r\n            const downTriangle = element.querySelector(`.${this.getClassName('triangleDownClass')}`);\r\n\r\n            if (!upTriangle || !downTriangle) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                // Reset both triangles to disabled\r\n                upTriangle.classList.add(this.getClassName('disabledClass'));\r\n                downTriangle.classList.add(this.getClassName('disabledClass'));\r\n\r\n                // Set the active direction\r\n                if (isActive && direction === 'up') {\r\n                    upTriangle.classList.remove(this.getClassName('disabledClass'));\r\n                } else if (isActive && direction === 'down') {\r\n                    downTriangle.classList.remove(this.getClassName('disabledClass'));\r\n                }\r\n            });\r\n        };\r\n\r\n        manager.clearIndicator = function (element) {\r\n            if (!element) return;\r\n\r\n            const upTriangle = element.querySelector(`.${this.getClassName('triangleUpClass')}`);\r\n            const downTriangle = element.querySelector(`.${this.getClassName('triangleDownClass')}`);\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                if (upTriangle) upTriangle.classList.add(this.getClassName('disabledClass'));\r\n                if (downTriangle) downTriangle.classList.add(this.getClassName('disabledClass'));\r\n            });\r\n        };\r\n\r\n        manager.removeIndicator = function (element) {\r\n            if (!element || !element.parentNode) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                element.parentNode.removeChild(element);\r\n            });\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        initialize(container) {\r\n            if (!instance) instance = createSortIndicatorElementManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance: () => instance,\r\n\r\n        // Class name getters\r\n        getSortIndicatorsClass: () => instance?.getSortIndicatorsClass() ?? 'sort-indicators',\r\n        getTriangleUpClass: () => instance?.getTriangleUpClass() ?? 'triangle-up',\r\n        getTriangleDownClass: () => instance?.getTriangleDownClass() ?? 'triangle-down',\r\n        getDisabledClass: () => instance?.getDisabledClass() ?? 'disabled',\r\n\r\n        // Element creation methods\r\n        createSortIndicatorTemplate: () => instance?.createSortIndicatorTemplate() ?? null,\r\n        createSortPlaceholder: () => instance?.createSortPlaceholder() ?? null,\r\n\r\n        // DOM manipulation methods\r\n        setTriangleState: (element, direction, isActive) => {\r\n            if (instance) instance.setTriangleState(element, direction, isActive);\r\n        },\r\n        clearIndicator: (element) => {\r\n            if (instance) instance.clearIndicator(element);\r\n        },\r\n        removeIndicator: (element) => {\r\n            if (instance) instance.removeIndicator(element);\r\n        },\r\n\r\n        // Base methods\r\n        setClassName: (key, value) => instance?.setClassName(key, value),\r\n        getClassName: key => instance?.getClassName(key) ?? null,\r\n        clearCache: () => instance?.clearCache()\r\n    };\r\n})();","/**\r\n * @title TableElementManager\r\n * @description  Manages table-specific elements\r\n * @author Daniel Oliveira\r\n */\r\nconst TableElementManager = (function () {\r\n    let instance = null;\r\n\r\n    function createManager(container) {\r\n        const manager = BaseElementManager.createElementManager('tableUI', container);\r\n\r\n        // CLASS NAMES SETUP\r\n        const classNames = {\r\n            tableTitle: 'data-table__title',\r\n            tableControls: 'data-table__controls',\r\n            moveColumnsHeader: 'move-columns-header',\r\n            moveColumnsExit: 'move-columns-exit'\r\n        };\r\n        Object.entries(classNames).forEach(([key, value]) => manager.setClassName(key, value));\r\n\r\n        // ELEMENT ACCESS METHODS\r\n        manager.getTableTitle = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('tableTitle')}`, \"getTableTitle()\", forceQuery);\r\n\r\n        manager.getTableControls = forceQuery =>\r\n            manager.getElement(`.${manager.getClassName('tableControls')}`, \"getTableControls()\", forceQuery);\r\n\r\n        manager.getTableTitleHeading = forceQuery => {\r\n            const title = manager.getTableTitle(forceQuery);\r\n            return title ? title.querySelector('h4') : null;\r\n        };\r\n\r\n        // ELEMENT CREATION METHODS\r\n        manager.createMoveColumnsHeader = (text = 'Select Column(s) to Move') => {\r\n            const header = document.createElement('div');\r\n            header.classList.add(manager.getClassName('moveColumnsHeader'));\r\n            header.textContent = text;\r\n            return header;\r\n        };\r\n\r\n        manager.createMoveColumnsExit = (text = '← Return') => {\r\n            const button = document.createElement('div');\r\n            button.classList.add(manager.getClassName('moveColumnsExit'));\r\n            button.textContent = text;\r\n            button.style.cursor = 'pointer';\r\n            return button;\r\n        };\r\n\r\n        manager.getOrCreateSubtitle = function (container) {\r\n            if (!container) return null;\r\n\r\n            const existingSubtitle = container.querySelector('.data-table__subtitle');\r\n            if (existingSubtitle) return existingSubtitle;\r\n\r\n            const subtitle = document.createElement('p');\r\n            subtitle.classList.add('data-table__subtitle');\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                container.appendChild(subtitle);\r\n            });\r\n\r\n            return subtitle;\r\n        };\r\n\r\n        // DOM MANIPULATION METHODS\r\n        manager.updateTitleText = function (titleElement, text) {\r\n            if (!titleElement) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                titleElement.textContent = text;\r\n            });\r\n        };\r\n\r\n        manager.updateSubtitleText = function (subtitleElement, text) {\r\n            if (!subtitleElement) return;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                subtitleElement.textContent = text;\r\n            });\r\n        };\r\n\r\n        manager.applyMoveColumnsHeaderStyle = function (element) {\r\n            if (!element) return element;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                element.style.fontSize = '20px';\r\n                element.style.fontWeight = '400';\r\n                element.style.paddingTop = '15px';\r\n            });\r\n\r\n            return element;\r\n        };\r\n\r\n        manager.applyMoveColumnsExitStyle = function (element) {\r\n            if (!element) return element;\r\n\r\n            DOMUtils.batchUpdate(() => {\r\n                element.style.fontSize = '18px';\r\n                element.style.fontWeight = '400';\r\n                element.style.paddingTop = '15px';\r\n            });\r\n\r\n            return element;\r\n        };\r\n\r\n        return manager;\r\n    }\r\n\r\n    // PUBLIC API\r\n    return {\r\n        initialize(container) {\r\n            if (!instance) instance = createManager(container);\r\n            return instance;\r\n        },\r\n\r\n        getInstance: () => instance,\r\n\r\n        // Element access methods\r\n        getTableTitle: forceQuery => instance?.getTableTitle(forceQuery) ?? null,\r\n        getTableControls: forceQuery => instance?.getTableControls(forceQuery) ?? null,\r\n        getTableTitleHeading: forceQuery => instance?.getTableTitleHeading(forceQuery) ?? null,\r\n\r\n        // Element creation methods\r\n        createMoveColumnsHeader: text => instance?.createMoveColumnsHeader(text) ?? null,\r\n        createMoveColumnsExit: text => instance?.createMoveColumnsExit(text) ?? null,\r\n        getOrCreateSubtitle: container => instance?.getOrCreateSubtitle(container) ?? null,\r\n\r\n        // DOM manipulation methods\r\n        updateTitleText: (titleElement, text) => {\r\n            if (instance) instance.updateTitleText(titleElement, text);\r\n        },\r\n        updateSubtitleText: (subtitleElement, text) => {\r\n            if (instance) instance.updateSubtitleText(subtitleElement, text);\r\n        },\r\n        applyMoveColumnsHeaderStyle: element => instance?.applyMoveColumnsHeaderStyle(element) ?? element,\r\n        applyMoveColumnsExitStyle: element => instance?.applyMoveColumnsExitStyle(element) ?? element,\r\n\r\n        // Base methods\r\n        setClassName: (key, value) => instance?.setClassName(key, value),\r\n        getClassName: key => instance?.getClassName(key) ?? null,\r\n        clearCache: () => instance?.clearCache()\r\n    };\r\n})();","/**\r\n * @title ColumnElementManager\r\n * @description Factory for creating element managers with built-in caching methods\r\n * @author Daniel Oliveira\r\n */\r\nconst BaseElementManager = (function () {\r\n    return {\r\n        createElementManager(moduleType, container) {\r\n            return {\r\n                moduleContainer: container instanceof NodeList ? container[0] : container,\r\n                elementCache: ElementCache.createCache(moduleType),\r\n                classNameRegistry: {},\r\n\r\n                getElement(selector, errorContext = moduleType, forceQuery = false, targetContainer) {\r\n                    const container = targetContainer || this.moduleContainer;\r\n                    const element = this.elementCache.get(selector, container, forceQuery);\r\n                    if (!element) console.warn(`${errorContext} --> Element not found: ${selector}`);\r\n                    return element;\r\n                },\r\n\r\n                getElements(selector, errorContext = moduleType, forceQuery = false, targetContainer) {\r\n                    const container = targetContainer || this.moduleContainer;\r\n                    const elements = this.elementCache.getAll(selector, container, forceQuery);\r\n                    if (!elements?.length) console.warn(`${errorContext} --> Elements not found: ${selector}`);\r\n                    return elements || [];\r\n                },\r\n\r\n                setClassName(key, value) {\r\n                    this.classNameRegistry[key] = value;\r\n                },\r\n\r\n                getClassName(key) {\r\n                    return this.classNameRegistry[key] || '';\r\n                },\r\n\r\n                clearCache() {\r\n                    this.elementCache.clear();\r\n                }\r\n            };\r\n        }\r\n    };\r\n})();"]}