{"version":3,"sources":["DataApplier.js","Utility.js"],"names":["DataApplierModule","let","instance","DataApplier","constructor","this","currentPage","isPageChangeInProgress","_initEventListeners","document","addEventListener","_handleRowDataFetched","bind","_handlePageDataFetched","_handleColumnDataFetched","_handleSearchDataFetched","_handleSearchDataCleared","_handleSortDataFetched","_handleSortDataCleared","_handlePageOutOfBounds","_handleColumnSwapped","event","detail","page","rows","data","columns","length","applyDataToRows","_dispatchDataEvent","rowsData","rowCount","totalCount","needsRowUpdate","rowsToUpdate","DOMUtils","batchUpdate","RowManagerModule","setRowCount","getAllRows","clearRowData","error","console","column","columnIndex","applyDataToColumn","_handleFilterOperation","operationType","totalResults","additionalData","term","type","direction","_updateRowsAndApplyData","eventMap","search","searchClear","sort","sortClear","maxValidPage","PaginationModule","goToPage","index1","index2","forEach","rowElement","tempContent","cells","RowElementManager","getCellsForRow","Math","max","textContent","deleteAllRows","addRows","Array","isArray","rowIndex","rowData","_applyRowData","closeAllExpandedRows","columnName","colIndex","formattedValue","value","extractValueFromData","formatCellValue","hasOwnProperty","JSON","stringify","String","eventName","dispatchEvent","CustomEvent","bubbles","setCurrentPage","TableDataModule","initialize","getInstance","PerformanceTracker","operationTimers","start","operationName","performance","now","end","durationMs","pendingDOMUpdates","isUpdateScheduled","updateFunction","push","scheduleProcess","requestAnimationFrame","processUpdates","updateBatch","updateFn","ElementCache","moduleElementCaches","Map","createCache","moduleId","has","set","containerElementMaps","WeakMap","get","selector","container","forceQuery","moduleCache","containerMap","element","querySelector","clear","getAll","collectionKey","elements","from","querySelectorAll"],"mappings":"AAKA,IAAAA,mBAAA,KACAC,IAAAC,EAAA,WAEAC,EACAC,cACAC,KAAAC,YAAA,EACAD,KAAAE,uBAAA,CAAA,EACAF,KAAAG,oBAAA,CACA,CAOAA,sBAEAC,SAAAC,iBAAA,2BAAAL,KAAAM,sBAAAC,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,4BAAAL,KAAAQ,uBAAAD,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,8BAAAL,KAAAS,yBAAAF,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,8BAAAL,KAAAU,yBAAAH,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,0BAAAL,KAAAW,yBAAAJ,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,4BAAAL,KAAAY,uBAAAL,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,wBAAAL,KAAAa,uBAAAN,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,4BAAAL,KAAAc,uBAAAP,KAAAP,IAAA,CAAA,EACAI,SAAAC,iBAAA,8BAAAL,KAAAe,qBAAAR,KAAAP,IAAA,CAAA,EAGAI,SAAAC,iBAAA,yBAAA,IACAL,KAAAC,YAAAe,EAAAC,OAAAC,MAAA,CACA,CAAA,CACA,CAOAZ,sBAAAU,GACA,GAAA,CAAAG,KAAAA,EAAAC,KAAAA,EAAAC,QAAAA,EAAApB,YAAAA,CAAA,EAAAe,EAAAC,OACAE,GAAAG,QAAAF,IAGApB,KAAAC,YAAAA,EAGAD,KAAAuB,gBAAAJ,EAAAC,EAAAC,CAAA,EAEArB,KAAAwB,mBAAA,cAAA,CAAAL,KAAAA,EAAAM,SAAAL,CAAA,CAAA,EACA,CAKAZ,uBAAAQ,GACA,GAAA,CACAE,KAAAA,EAAAQ,SAAAA,EAAAC,WAAAA,EACAP,KAAAA,EAAAC,QAAAA,EAAAO,eAAAA,CACA,EAAAZ,EAAAC,OAGAjB,KAAAC,YAAAiB,EACAlB,KAAAE,uBAAA,CAAA,EAEA,IACAN,IAAAiC,EAEAD,EAEAE,SAAAC,YAAA,KACA,EAAAL,IACAM,iBAAAC,YAAAP,CAAA,EACAG,EAAAG,iBAAAE,WAAA,EACAlC,KAAAuB,gBAAAM,EAAAT,EAAAC,CAAA,EAEA,CAAA,GAGAQ,EAAAG,iBAAAG,aAAA,EACAnC,KAAAuB,gBAAAM,EAAAT,EAAAC,CAAA,GAIArB,KAAAwB,mBAAA,kBAAA,CACAN,KAAAA,EACAQ,SAAAA,EACAC,WAAAA,EACAR,KAAAU,EACAT,KAAAA,CACA,CAAA,CAKA,CAJA,MAAAgB,GACAC,QAAAD,2CAAAlB,KAAAkB,CAAA,CACA,CAAA,QACApC,KAAAE,uBAAA,CAAA,CACA,CACA,CAKAO,yBAAAO,GACA,GAAA,CAAAsB,OAAAA,EAAAC,YAAAA,EAAAnB,KAAAA,EAAAF,KAAAA,CAAA,EAAAF,EAAAC,OACAG,IAGApB,KAAAC,YAAAiB,EAGAC,EAAAa,iBAAAE,WAAA,EAGAlC,KAAAwC,kBAAArB,EAAAC,EAAAkB,EAAAC,CAAA,EACA,CAKAE,uBAAAzB,EAAA0B,GACA,GAAA,CACAxB,KAAAA,EAAAQ,SAAAA,EAAAL,QAAAA,EAAAD,KAAAA,EAAAQ,eAAAA,EACAD,WAAAA,EAAAgB,aAAAA,CACA,EAAA3B,EAAAC,OAEA2B,EAAA,GAGA,WAAAF,GACAE,EAAAC,KAAA7B,EAAAC,OAAA4B,KACAD,EAAAE,KAAA9B,EAAAC,OAAA6B,KACAF,EAAAD,aAAAA,IACA,SAAAD,IACAE,EAAAN,OAAAtB,EAAAC,OAAAqB,OACAM,EAAAG,UAAA/B,EAAAC,OAAA8B,WAGAH,EAAAD,aAAAhB,GAGA3B,KAAAE,uBAAA,CAAA,EAEA,IAEAF,KAAAC,YAAAiB,EAGAlB,KAAAgD,wBAAAtB,EAAAN,EAAAC,EAAAO,CAAA,EAAA,IAGAqB,EAAA,CACAC,OAAA,gBACAC,YAAA,gBACAC,KAAA,cACAC,UAAA,aACA,EAGArD,KAAAwB,mBAAAyB,EAAAP,GAAA,CACAxB,KAAAA,EACAQ,SAAAA,EACAiB,aAAAC,EAAAD,aACAtB,QAAAA,EACA,GAAAuB,CACA,CAAA,CAKA,CAJA,MAAAR,GACAC,QAAAD,wBAAAM,eAAAN,CAAA,CACA,CAAA,QACApC,KAAAE,uBAAA,CAAA,CACA,CACA,CAKAQ,yBAAAM,GACAhB,KAAAyC,uBAAAzB,EAAA,QAAA,CACA,CAKAL,yBAAAK,GACAhB,KAAAyC,uBAAAzB,EAAA,aAAA,CACA,CAKAJ,uBAAAI,GACAhB,KAAAyC,uBAAAzB,EAAA,MAAA,CACA,CAKAH,uBAAAG,GACAhB,KAAAyC,uBAAAzB,EAAA,WAAA,CACA,CAKAF,uBAAAE,GACA,GAAA,CAAAf,YAAAA,EAAAqD,aAAAA,CAAA,EAAAtC,EAAAC,OAGAsC,kBAAAC,UAAAvD,IAAAqD,GACAC,iBAAAC,SAAAF,CAAA,CAEA,CAKAvC,qBAAAC,GACA,GAAA,CAAAyC,OAAAA,EAAAC,OAAAA,CAAA,EAAA1C,EAAAC,OAGAE,EAAAa,iBAAAE,WAAA,EACAf,GAAAG,SAGAQ,SAAAC,YAAA,KACAZ,EAAAwC,QAAAC,IACA,IAKAC,EALAC,EAAAC,kBAAAC,eAAAJ,CAAA,EAGAE,EAAAxC,OAAA2C,KAAAC,IAAAT,EAAAC,CAAA,IAEAG,EAAAC,EAAAL,GAAAU,YACAL,EAAAL,GAAAU,YAAAL,EAAAJ,GAAAS,YACAL,EAAAJ,GAAAS,YAAAN,EAEA,CAAA,CACA,CAAA,EAGA7D,KAAAwB,mBAAA,gBAAAR,EAAAC,MAAA,EACA,CAOA+B,wBAAAtB,EAAAN,EAAAC,EAAAO,EAAA,CAAA,GACAhC,IAAAiC,EAoBA,OAlBAD,EAEAE,SAAAC,YAAA,KACAC,iBAAAoC,cAAA,EACA,EAAA1C,IACAG,EAAAG,iBAAAqC,QAAA3C,CAAA,EAEA,CAAA,EAGAG,EAAAG,iBAAAG,aAAA,EAIAN,GAAAP,QAAA,EAAAI,GAAAN,GACApB,KAAAuB,gBAAAM,EAAAT,EAAAC,CAAA,EAGAQ,CACA,CAOAN,gBAAAJ,EAAAC,EAAAC,GAGA,IAAAI,EAAA6C,MAAAC,QAAAnD,CAAA,EAAAA,EAAAA,EAAAD,MAAA,GACAM,GAAAH,QAGAQ,SAAAC,YAAA,KACAZ,EAAAwC,QAAA,CAAAC,EAAAY,KACAA,GAAA/C,EAAAH,SAEAmD,EAAAhD,EAAA+C,KAGAxE,KAAA0E,cAAAd,EAAAa,EAAApD,CAAA,CACA,CAAA,EAGAW,iBAAA2C,qBAAA,CACA,CAAA,CACA,CAKAD,cAAAd,EAAAa,EAAApD,GAEA,IAAAyC,EAAAC,kBAAAC,eAAAJ,CAAA,EAGAvC,EAAAsC,QAAA,CAAAiB,EAAAC,KACAA,GAAAf,EAAAxC,SAGAwD,EAAAC,OADAA,EAAA/E,KAAAgF,qBAAAP,EAAAG,CAAA,GAEA5E,KAAAiF,gBAAAF,CAAA,EAAA,GAGAjB,EAAAe,GAAAV,cAAAW,IACAhB,EAAAe,GAAAV,YAAAW,GAEA,CAAA,CACA,CAKAtC,kBAAArB,EAAAC,EAAAwD,EAAArC,GACApB,GAAAG,QAAAF,GAAAE,SAGAQ,SAAAC,YAAA,KACAZ,EAAAwC,QAAA,CAAAC,EAAAY,KACAA,GAAApD,EAAAE,SAEAmD,EAAArD,EAAAoD,MAGAV,EAAAC,kBAAAC,eAAAJ,CAAA,EACArB,GAAAuB,EAAAxC,SAIAwD,EAAAC,OADAA,EAAA/E,KAAAgF,qBAAAP,EAAAG,CAAA,GAEA5E,KAAAiF,gBAAAF,CAAA,EAAA,GAGAjB,EAAAvB,GAAA4B,cAAAW,IACAhB,EAAAvB,GAAA4B,YAAAW,IAEA,CAAA,CACA,CAAA,EAGA9E,KAAAwB,mBAAA,oBAAA,CACAc,OAAAsC,EAAArC,YAAAA,EAAApB,KAAAA,EAAAC,KAAAA,CACA,CAAA,EACA,CAOA4D,qBAAAP,EAAAG,GAEA,OAAAH,EAAAS,eAAAN,CAAA,EACAH,EAAAG,GAEA,IACA,CAKAK,gBAAAF,GACA,OAAAA,MAAAA,EACA,GAGA,UAAA,OAAAA,EACAI,KAAAC,UAAAL,CAAA,EAGAM,OAAAN,CAAA,CACA,CAOAvD,mBAAA8D,EAAArE,GACAb,SAAAmF,cAAA,IAAAC,YAAA,eAAAF,EAAA,CACAG,QAAA,CAAA,EACAxE,OAAAA,CACA,CAAA,CAAA,CACA,CAOAyE,eAAAxE,GACAlB,KAAAC,YAAAiB,GAAA,EAGAyE,gBAAAD,gBACAC,gBAAAD,eAAA1F,KAAAC,WAAA,CAEA,CACA,CAGA,MAAA,CAIA2F,aAIA,OAHA/F,EAAAA,GACA,IAAAC,CAGA,EAKA+F,YAAA,IAAAhG,EAKA6F,eAAA,GAAA7F,GAAA6F,eAAAxE,CAAA,EAKAK,gBAAA,CAAAJ,EAAAC,EAAAC,IAAAxB,GAAA0B,gBAAAJ,EAAAC,EAAAC,CAAA,CACA,CACA,GAAA,EC9aAyE,oBAAA,KACA,IAAAC,EAAA,GAGA,MAAA,CACAC,MAAAC,GACAF,EAAAE,GAAAC,YAAAC,IAAA,CACA,EAEAC,IAAAH,GACA,IAEAI,EAFA,OAAAN,EAAAE,IAEAI,EAAAH,YAAAC,IAAA,EAAAJ,EAAAE,GAMA,OAAAF,EAAAE,GACAI,GATA,IAUA,CACA,CACA,GAAA,EAKAvE,UAAA,KACA,IAAAwE,EAAA,GACAC,EAAA,CAAA,EAEA,MAAA,CACAxE,YAAAyE,GACA,YAAA,OAAAA,EACAnE,QAAAD,MAAA,mCAAA,GAIAkE,EAAAG,KAAAD,CAAA,EACAxG,KAAA0G,gBAAA,EACA,EAEAA,kBACAH,IACAA,EAAA,CAAA,EACAI,sBAAA,IAAA3G,KAAA4G,eAAA,CAAA,EAEA,EAEAA,iBACAd,mBAAAE,MAAA,mBAAA,EAEA,IAAAa,EAAA,CAAA,GAAAP,GACAA,EAAAhF,OAAA,EACAiF,EAAA,CAAA,EAEAM,EAAAlD,QAAAmD,IACA,IACAA,EAAA,CAGA,CAFA,MAAA1E,GACAC,QAAAD,MAAA,uCAAAA,CAAA,CACA,CACA,CAAA,EAEA0D,mBAAAM,IAAA,mBAAA,CACA,CACA,CACA,GAAA,EAKAW,cAAA,KACA,IAAAC,EAAA,IAAAC,IAEA,MAAA,CACAC,YAAAC,GACA,OAAAA,GAKAH,EAAAI,IAAAD,CAAA,GACAH,EAAAK,IAAAF,EAAA,CACAG,qBAAA,IAAAC,OACA,CAAA,EAGA,CACAC,IAAAC,EAAAC,EAAAC,EAAA,CAAA,GACA,GAAA,CAAAF,GAAA,CAAAC,EAAA,OAAA,KAEA,IAAAE,EAAAZ,EAAAQ,IAAAL,CAAA,EACAvH,IAAAiI,EAAAD,EAAAN,qBAAAE,IAAAE,CAAA,EAOA,OALAG,IACAA,EAAA,IAAAZ,IACAW,EAAAN,qBAAAD,IAAAK,EAAAG,CAAA,GAGA,CAAAF,GAAAE,EAAAT,IAAAK,CAAA,EACAI,EAAAL,IAAAC,CAAA,IAGAK,EAAAJ,EAAAK,cAAAN,CAAA,IACAI,EAAAR,IAAAI,EAAAK,CAAA,EAEAA,EACA,EAEAT,IAAAI,EAAAK,EAAAJ,GACA,GAAAD,GAAAK,GAAAJ,EAAA,CAEA,IAAAE,EAAAZ,EAAAQ,IAAAL,CAAA,EACAvH,IAAAiI,EAAAD,EAAAN,qBAAAE,IAAAE,CAAA,EAEAG,IACAA,EAAA,IAAAZ,IACAW,EAAAN,qBAAAD,IAAAK,EAAAG,CAAA,GAGAA,EAAAR,IAAAI,EAAAK,CAAA,CAVA,CAWA,EAEAE,MAAAN,EAAA,MACA,IAAAE,EAAAZ,EAAAQ,IAAAL,CAAA,EAEAO,GACAG,EAAAD,EAAAN,qBAAAE,IAAAE,CAAA,IACAG,EAAAG,MAAA,EAEAJ,EAAAN,qBAAA,IAAAC,OAEA,EAEAU,OAAAR,EAAAC,EAAAC,EAAA,CAAA,GACA,GAAA,CAAAF,GAAA,CAAAC,EAAA,MAAA,GAEA,IAAAE,EAAAZ,EAAAQ,IAAAL,CAAA,EACAe,EAAA,cAAAT,EAEA7H,IAAAiI,EAAAD,EAAAN,qBAAAE,IAAAE,CAAA,EAMA,OALAG,IACAA,EAAA,IAAAZ,IACAW,EAAAN,qBAAAD,IAAAK,EAAAG,CAAA,GAGA,CAAAF,GAAAE,EAAAT,IAAAc,CAAA,EACAL,EAAAL,IAAAU,CAAA,GAGAC,EAAA7D,MAAA8D,KAAAV,EAAAW,iBAAAZ,CAAA,CAAA,EACAI,EAAAR,IAAAa,EAAAC,CAAA,EAEAA,EACA,CACA,IA9EA9F,QAAAD,MAAA,kCAAA,EACA,KA8EA,CACA,CACA,GAAA","file":"utilities.min.js","sourcesContent":["/**\r\n * @title DataApplierModule\r\n * @description Applies data to table rows and columns based on TableDataModule events\r\n * @author Daniel Oliveira\r\n */\r\nconst DataApplierModule = (function () {\r\n    let instance = null;\r\n\r\n    class DataApplier {\r\n        constructor() {\r\n            this.currentPage = 1;\r\n            this.isPageChangeInProgress = false;\r\n            this._initEventListeners();\r\n        }\r\n\r\n        // EVENT SETUP\r\n\r\n        /**\r\n         * Sets up event listeners for TableDataModule events\r\n         */\r\n        _initEventListeners() {\r\n            // Data events from TableDataModule\r\n            document.addEventListener('tableData:rowDataFetched', this._handleRowDataFetched.bind(this));\r\n            document.addEventListener('tableData:pageDataFetched', this._handlePageDataFetched.bind(this));\r\n            document.addEventListener('tableData:columnDataFetched', this._handleColumnDataFetched.bind(this));\r\n            document.addEventListener('tableData:searchDataFetched', this._handleSearchDataFetched.bind(this));\r\n            document.addEventListener('tableData:searchCleared', this._handleSearchDataCleared.bind(this));\r\n            document.addEventListener('tableData:sortDataFetched', this._handleSortDataFetched.bind(this));\r\n            document.addEventListener('tableData:sortCleared', this._handleSortDataCleared.bind(this));\r\n            document.addEventListener('tableData:pageOutOfBounds', this._handlePageOutOfBounds.bind(this));\r\n            document.addEventListener('columnManager:columnSwapped', this._handleColumnSwapped.bind(this));\r\n\r\n            // Legacy event listener for backward compatibility\r\n            document.addEventListener('pagination:pageChanged', (event) => {\r\n                this.currentPage = event.detail.page || 1;\r\n            });\r\n        }\r\n\r\n        // EVENT HANDLERS\r\n\r\n        /**\r\n         * Applies data when new rows are added\r\n         */\r\n        _handleRowDataFetched(event) {\r\n            const { rows, data, columns, currentPage } = event.detail;\r\n            if (!rows?.length || !data) return;\r\n\r\n            // Update current page\r\n            this.currentPage = currentPage;\r\n\r\n            // Apply data to rows\r\n            this.applyDataToRows(rows, data, columns);\r\n\r\n            this._dispatchDataEvent('dataApplied', { rows, rowsData: data });\r\n        }\r\n\r\n        /**\r\n         * Applies data when changing pages\r\n         */\r\n        _handlePageDataFetched(event) {\r\n            const {\r\n                page, rowCount, totalCount, rows,\r\n                data, columns, needsRowUpdate\r\n            } = event.detail;\r\n\r\n            // Update page state\r\n            this.currentPage = page;\r\n            this.isPageChangeInProgress = true;\r\n\r\n            try {\r\n                let rowsToUpdate;\r\n\r\n                if (needsRowUpdate) {\r\n                    // Row count changed - update row count\r\n                    DOMUtils.batchUpdate(() => {\r\n                        if (rowCount > 0) {\r\n                            RowManagerModule.setRowCount(rowCount);\r\n                            rowsToUpdate = RowManagerModule.getAllRows();\r\n                            this.applyDataToRows(rowsToUpdate, data, columns);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // Same row count - just clear data\r\n                    rowsToUpdate = RowManagerModule.clearRowData();\r\n                    this.applyDataToRows(rowsToUpdate, data, columns);\r\n                }\r\n\r\n                // Notify other modules\r\n                this._dispatchDataEvent('pageDataApplied', {\r\n                    page,\r\n                    rowCount,\r\n                    totalCount,\r\n                    rows: rowsToUpdate,\r\n                    data\r\n                });\r\n            } catch (error) {\r\n                console.error(`Error applying page data for page ${page}:`, error);\r\n            } finally {\r\n                this.isPageChangeInProgress = false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Applies data when a column is added\r\n         */\r\n        _handleColumnDataFetched(event) {\r\n            const { column, columnIndex, data, page } = event.detail;\r\n            if (!data) return;\r\n\r\n            // Update current page\r\n            this.currentPage = page;\r\n\r\n            // Get all rows\r\n            const rows = RowManagerModule.getAllRows();\r\n\r\n            // Apply column data\r\n            this.applyDataToColumn(rows, data, column, columnIndex);\r\n        }\r\n\r\n        /**\r\n         * Handles data after search/sort/clear operations with common implementation\r\n         */\r\n        _handleFilterOperation(event, operationType) {\r\n            const {\r\n                page, rowCount, columns, data, needsRowUpdate,\r\n                totalCount, totalResults\r\n            } = event.detail;\r\n\r\n            const additionalData = {};\r\n\r\n            // Get operation-specific data\r\n            if (operationType === 'search') {\r\n                additionalData.term = event.detail.term;\r\n                additionalData.type = event.detail.type;\r\n                additionalData.totalResults = totalResults;\r\n            } else if (operationType === 'sort') {\r\n                additionalData.column = event.detail.column;\r\n                additionalData.direction = event.detail.direction;\r\n                additionalData.totalResults = totalCount;\r\n            } else {\r\n                additionalData.totalResults = totalCount;\r\n            }\r\n\r\n            this.isPageChangeInProgress = true;\r\n\r\n            try {\r\n                // Update current page\r\n                this.currentPage = page;\r\n\r\n                // Process rows based on the common pattern\r\n                const rowsToUpdate = this._updateRowsAndApplyData(rowCount, data, columns, needsRowUpdate);\r\n\r\n                // Notification type based on operation\r\n                const eventMap = {\r\n                    'search': 'searchApplied',\r\n                    'searchClear': 'searchCleared',\r\n                    'sort': 'sortApplied',\r\n                    'sortClear': 'sortCleared'\r\n                };\r\n\r\n                // Notify other modules\r\n                this._dispatchDataEvent(eventMap[operationType], {\r\n                    page,\r\n                    rowCount,\r\n                    totalResults: additionalData.totalResults,\r\n                    columns,\r\n                    ...additionalData\r\n                });\r\n            } catch (error) {\r\n                console.error(`Error handling ${operationType} operation:`, error);\r\n            } finally {\r\n                this.isPageChangeInProgress = false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Applies data after search\r\n         */\r\n        _handleSearchDataFetched(event) {\r\n            this._handleFilterOperation(event, 'search');\r\n        }\r\n\r\n        /**\r\n         * Applies data after search is cleared\r\n         */\r\n        _handleSearchDataCleared(event) {\r\n            this._handleFilterOperation(event, 'searchClear');\r\n        }\r\n\r\n        /**\r\n         * Applies data after sort\r\n         */\r\n        _handleSortDataFetched(event) {\r\n            this._handleFilterOperation(event, 'sort');\r\n        }\r\n\r\n        /**\r\n         * Applies data after sort is cleared\r\n         */\r\n        _handleSortDataCleared(event) {\r\n            this._handleFilterOperation(event, 'sortClear');\r\n        }\r\n\r\n        /**\r\n         * Handles case when page is out of bounds\r\n         */\r\n        _handlePageOutOfBounds(event) {\r\n            const { currentPage, maxValidPage } = event.detail;\r\n\r\n            // Navigate to valid page\r\n            if (PaginationModule?.goToPage && currentPage !== maxValidPage) {\r\n                PaginationModule.goToPage(maxValidPage);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handles column swap events\r\n         */\r\n        _handleColumnSwapped(event) {\r\n            const { index1, index2 } = event.detail;\r\n\r\n            // Get all rows\r\n            const rows = RowManagerModule.getAllRows();\r\n            if (!rows?.length) return;\r\n\r\n            // Batch DOM operations for better performance\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach(rowElement => {\r\n                    const cells = RowElementManager.getCellsForRow(rowElement);\r\n\r\n                    // Make sure we have both cells\r\n                    if (cells.length > Math.max(index1, index2)) {\r\n                        // Swap content between cells\r\n                        const tempContent = cells[index1].textContent;\r\n                        cells[index1].textContent = cells[index2].textContent;\r\n                        cells[index2].textContent = tempContent;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Notify other modules about the swap\r\n            this._dispatchDataEvent('columnSwapped', event.detail);\r\n        }\r\n\r\n        // ROW MANAGEMENT METHODS\r\n\r\n        /**\r\n         * Helper method to update rows and apply data with common pattern\r\n         */\r\n        _updateRowsAndApplyData(rowCount, data, columns, needsRowUpdate = true) {\r\n            let rowsToUpdate;\r\n\r\n            if (needsRowUpdate) {\r\n                // Row count changed\r\n                DOMUtils.batchUpdate(() => {\r\n                    RowManagerModule.deleteAllRows();\r\n                    if (rowCount > 0) {\r\n                        rowsToUpdate = RowManagerModule.addRows(rowCount);\r\n                    }\r\n                });\r\n            } else {\r\n                // Just clear existing rows\r\n                rowsToUpdate = RowManagerModule.clearRowData();\r\n            }\r\n\r\n            // Apply data if we have rows\r\n            if (rowsToUpdate?.length && rowCount > 0 && data) {\r\n                this.applyDataToRows(rowsToUpdate, data, columns);\r\n            }\r\n\r\n            return rowsToUpdate;\r\n        }\r\n\r\n        // DATA APPLICATION METHODS\r\n\r\n        /**\r\n         * Applies data to table rows\r\n         */\r\n        applyDataToRows(rows, data, columns) {\r\n            // Normalize data format\r\n           \r\n            const rowsData = Array.isArray(data) ? data : (data.rows || []);\r\n            if (!rowsData?.length) return;\r\n\r\n            // Batch DOM operations\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach((rowElement, rowIndex) => {\r\n                    if (rowIndex >= rowsData.length) return;\r\n\r\n                    const rowData = rowsData[rowIndex];\r\n                    if (!rowData) return;\r\n\r\n                    this._applyRowData(rowElement, rowData, columns);\r\n                });\r\n\r\n                // Close any open detail panels\r\n                RowManagerModule.closeAllExpandedRows();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Applies data to a single row\r\n         */\r\n        _applyRowData(rowElement, rowData, columns) {\r\n          \r\n            const cells = RowElementManager.getCellsForRow(rowElement);\r\n\r\n            // Fill each cell with data\r\n            columns.forEach((columnName, colIndex) => {\r\n                if (colIndex >= cells.length) return;\r\n\r\n                const value = this.extractValueFromData(rowData, columnName);\r\n                const formattedValue = value !== null && value !== undefined\r\n                    ? this.formatCellValue(value) : '';\r\n\r\n                // Update only if content changed\r\n                if (cells[colIndex].textContent !== formattedValue) {\r\n                    cells[colIndex].textContent = formattedValue;\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Applies data to a specific column\r\n         */\r\n        applyDataToColumn(rows, data, columnName, columnIndex) {\r\n            if (!rows?.length || !data?.length) return;\r\n\r\n            // Batch DOM operations\r\n            DOMUtils.batchUpdate(() => {\r\n                rows.forEach((rowElement, rowIndex) => {\r\n                    if (rowIndex >= data.length) return;\r\n\r\n                    const rowData = data[rowIndex];\r\n                    if (!rowData) return;\r\n\r\n                    const cells = RowElementManager.getCellsForRow(rowElement);\r\n                    if (columnIndex >= cells.length) return;\r\n\r\n                    // Extract and format value\r\n                    const value = this.extractValueFromData(rowData, columnName);\r\n                    const formattedValue = value !== null && value !== undefined\r\n                        ? this.formatCellValue(value) : '';\r\n\r\n                    // Update only if content changed\r\n                    if (cells[columnIndex].textContent !== formattedValue) {\r\n                        cells[columnIndex].textContent = formattedValue;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Notify other modules\r\n            this._dispatchDataEvent('columnDataApplied', {\r\n                column: columnName, columnIndex, rows, data\r\n            });\r\n        }\r\n\r\n        // DATA HELPERS\r\n\r\n        /**\r\n         * Extracts value from data object\r\n         */\r\n        extractValueFromData(rowData, columnName) {\r\n            // Check direct property match\r\n            if (rowData.hasOwnProperty(columnName)) {\r\n                return rowData[columnName];\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Formats cell value for display\r\n         */\r\n        formatCellValue(value) {\r\n            if (value === null || value === undefined) {\r\n                return '';\r\n            }\r\n\r\n            if (typeof value === 'object') {\r\n                return JSON.stringify(value);\r\n            }\r\n\r\n            return String(value);\r\n        }\r\n\r\n        // EVENT DISPATCHING\r\n\r\n        /**\r\n         * Dispatches event with data operation details\r\n         */\r\n        _dispatchDataEvent(eventName, detail) {\r\n            document.dispatchEvent(new CustomEvent(`dataApplier:${eventName}`, {\r\n                bubbles: true,\r\n                detail\r\n            }));\r\n        }\r\n\r\n        // PUBLIC METHODS\r\n\r\n        /**\r\n         * Updates current page and syncs with TableDataModule\r\n         */\r\n        setCurrentPage(page) {\r\n            this.currentPage = page || 1;\r\n\r\n            // Forward to TableDataModule\r\n            if (TableDataModule.setCurrentPage) {\r\n                TableDataModule.setCurrentPage(this.currentPage);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Public API\r\n    return {\r\n        /**\r\n         * Initializes the module\r\n         */\r\n        initialize() {\r\n            if (!instance) {\r\n                instance = new DataApplier();\r\n            }\r\n            return instance;\r\n        },\r\n\r\n        /**\r\n         * Gets the singleton instance\r\n         */\r\n        getInstance: () => instance,\r\n\r\n        /**\r\n         * Sets current page\r\n         */\r\n        setCurrentPage: (page) => instance?.setCurrentPage(page),\r\n\r\n        /**\r\n         * Applies data to rows (for backward compatibility)\r\n         */\r\n        applyDataToRows: (rows, data, columns) => instance?.applyDataToRows(rows, data, columns)\r\n    };\r\n})();","/**\r\n * @module Utilities\r\n * @author Daniel Oliveira\r\n * @description Provides global utility helper functions for other modules\r\n */\r\n\r\n/**\r\n * Performance monitoring tools\r\n */\r\nconst PerformanceTracker = (function () {\r\n    const operationTimers = {};\r\n    const enableDebugLogging = false;\r\n\r\n    return {\r\n        start(operationName) {\r\n            operationTimers[operationName] = performance.now();\r\n        },\r\n\r\n        end(operationName) {\r\n            if (!operationTimers[operationName]) return null;\r\n\r\n            const durationMs = performance.now() - operationTimers[operationName];\r\n\r\n            if (enableDebugLogging) {\r\n                console.debug(`Performance: ${operationName} took ${durationMs.toFixed(2)}ms`);\r\n            }\r\n\r\n            delete operationTimers[operationName];\r\n            return durationMs;\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Batched DOM manipulation\r\n */\r\nconst DOMUtils = (function () {\r\n    const pendingDOMUpdates = [];\r\n    let isUpdateScheduled = false;\r\n\r\n    return {\r\n        batchUpdate(updateFunction) {\r\n            if (typeof updateFunction !== 'function') {\r\n                console.error('DOMUtils: Invalid update function');\r\n                return;\r\n            }\r\n\r\n            pendingDOMUpdates.push(updateFunction);\r\n            this.scheduleProcess();\r\n        },\r\n\r\n        scheduleProcess() {\r\n            if (!isUpdateScheduled) {\r\n                isUpdateScheduled = true;\r\n                requestAnimationFrame(() => this.processUpdates());\r\n            }\r\n        },\r\n\r\n        processUpdates() {\r\n            PerformanceTracker.start('processDomUpdates');\r\n\r\n            const updateBatch = [...pendingDOMUpdates];\r\n            pendingDOMUpdates.length = 0;\r\n            isUpdateScheduled = false;\r\n\r\n            updateBatch.forEach(updateFn => {\r\n                try {\r\n                    updateFn();\r\n                } catch (error) {\r\n                    console.error('DOMUtils: Error in update operation:', error);\r\n                }\r\n            });\r\n\r\n            PerformanceTracker.end('processDomUpdates');\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * DOM element caching system\r\n */\r\nconst ElementCache = (function () {\r\n    const moduleElementCaches = new Map();\r\n\r\n    return {\r\n        createCache(moduleId) {\r\n            if (!moduleId) {\r\n                console.error('ElementCache: Module ID required');\r\n                return null;\r\n            }\r\n\r\n            if (!moduleElementCaches.has(moduleId)) {\r\n                moduleElementCaches.set(moduleId, {\r\n                    containerElementMaps: new WeakMap()\r\n                });\r\n            }\r\n\r\n            return {\r\n                get(selector, container, forceQuery = false) {\r\n                    if (!selector || !container) return null;\r\n\r\n                    const moduleCache = moduleElementCaches.get(moduleId);\r\n                    let containerMap = moduleCache.containerElementMaps.get(container);\r\n\r\n                    if (!containerMap) {\r\n                        containerMap = new Map();\r\n                        moduleCache.containerElementMaps.set(container, containerMap);\r\n                    }\r\n\r\n                    if (!forceQuery && containerMap.has(selector)) {\r\n                        return containerMap.get(selector);\r\n                    }\r\n\r\n                    const element = container.querySelector(selector);\r\n                    if (element) containerMap.set(selector, element);\r\n\r\n                    return element;\r\n                },\r\n\r\n                set(selector, element, container) {\r\n                    if (!selector || !element || !container) return;\r\n\r\n                    const moduleCache = moduleElementCaches.get(moduleId);\r\n                    let containerMap = moduleCache.containerElementMaps.get(container);\r\n\r\n                    if (!containerMap) {\r\n                        containerMap = new Map();\r\n                        moduleCache.containerElementMaps.set(container, containerMap);\r\n                    }\r\n\r\n                    containerMap.set(selector, element);\r\n                },\r\n\r\n                clear(container = null) {\r\n                    const moduleCache = moduleElementCaches.get(moduleId);\r\n\r\n                    if (container) {\r\n                        const containerMap = moduleCache.containerElementMaps.get(container);\r\n                        if (containerMap) containerMap.clear();\r\n                    } else {\r\n                        moduleCache.containerElementMaps = new WeakMap();\r\n                    }\r\n                },\r\n\r\n                getAll(selector, container, forceQuery = false) {\r\n                    if (!selector || !container) return [];\r\n\r\n                    const moduleCache = moduleElementCaches.get(moduleId);\r\n                    const collectionKey = `collection:${selector}`;\r\n\r\n                    let containerMap = moduleCache.containerElementMaps.get(container);\r\n                    if (!containerMap) {\r\n                        containerMap = new Map();\r\n                        moduleCache.containerElementMaps.set(container, containerMap);\r\n                    }\r\n\r\n                    if (!forceQuery && containerMap.has(collectionKey)) {\r\n                        return containerMap.get(collectionKey);\r\n                    }\r\n\r\n                    const elements = Array.from(container.querySelectorAll(selector));\r\n                    containerMap.set(collectionKey, elements);\r\n\r\n                    return elements;\r\n                }\r\n            };\r\n        }\r\n    };\r\n})();"]}