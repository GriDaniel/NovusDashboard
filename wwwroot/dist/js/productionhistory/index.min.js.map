{"version":3,"file":"index.min.js","sources":["Index.js"],"sourcesContent":["/**\r\n * @module TableInitialization\r\n * @description Lightweight initialization module with configurable preferences\r\n */\r\ndocument.addEventListener('DOMContentLoaded', async function () {\r\n    // Configuration with developer options\r\n    const CONFIG = {\r\n        baseUrl: '',  // Empty for relative URLs\r\n        defaultColumnTitles: [\"Name\", \"Profile Name\", \"File Path\"],\r\n        defaultRowCount: 10,\r\n        apiEndpoints: {\r\n            getPreferences: '/TablePreferences/GetPreferences',\r\n            updateColumns: '/TablePreferences/UpdateColumns',\r\n            updateRowCount: '/TablePreferences/UpdateRowCount'\r\n        },\r\n        useServerPreferences: true, // Developer can set to false to use defaults\r\n        initialPage: 1\r\n    };\r\n\r\n    // Utility function for error logging\r\n    const logError = (context, error) => {\r\n        console.error(`[TableInit] ${context}:`, error);\r\n    };\r\n\r\n    // Main initialization function\r\n    async function initializeTable() {\r\n        try {\r\n            // Get DOM references\r\n            const areaContainer = document.querySelector('.data-table');\r\n            const rowDropdownContainers = document.querySelectorAll('.dropdown-container');\r\n\r\n            // Validate container exists\r\n            if (!areaContainer) {\r\n                throw new Error('Data table container not found');\r\n            }\r\n\r\n            // Initialize core modules\r\n            initializeCoreModules(areaContainer);\r\n\r\n            // Retrieve and apply preferences\r\n            const prefs = await getTablePreferences();\r\n\r\n            // Set up columns\r\n            ColumnManagerModule.addColumns(prefs.columnTitles.length, prefs.columnTitles);\r\n\r\n            // Initialize remaining modules\r\n            DropdownContainerModule.initialize(rowDropdownContainers);\r\n            TableDataModule.initialize();\r\n            DataApplierModule.initialize();\r\n\r\n            // Apply row count from preferences\r\n            RowManagerModule.setRowCountWithData(prefs.rowCount, CONFIG.initialPage);\r\n            DropdownContainerModule.setSelectedRowCount(prefs.rowCount);\r\n\r\n            PaginationModule.initialize();\r\n            TableTitleModule.initialize();\r\n\r\n            // Set up handlers for saving preferences\r\n            setupPreferencesPersistence();\r\n\r\n        } catch (error) {\r\n            logError('Table initialization failed', error);\r\n        }\r\n    }\r\n\r\n    // Initialize all core modules\r\n    function initializeCoreModules(container) {\r\n        [\r\n            () => SearchElementManager.initialize(container),\r\n            () => RowElementManager.initialize(container),\r\n            () => ColumnElementManager.initialize(container),\r\n            () => TableElementManager.initialize(container),\r\n            () => DropdownElementManager.initialize(container),\r\n            () => PaginationElementManager.initialize(container),\r\n            () => SearchBarModule.initialize(container),\r\n            () => SortIndicatorElementManager.initialize(container),\r\n            () => ColumnManagerModule.initialize(),\r\n            () => RowManagerModule.initialize(),\r\n            () => SortIndicatorModule.initialize()\r\n        ].forEach(initializer => {\r\n            try {\r\n                initializer();\r\n            } catch (initError) {\r\n                logError(`Module initialization failed`, initError);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get table preferences from server or use defaults\r\n     */\r\n    async function getTablePreferences() {\r\n        // Default preferences\r\n        const defaultPrefs = {\r\n            columnTitles: CONFIG.defaultColumnTitles,\r\n            rowCount: CONFIG.defaultRowCount\r\n        };\r\n\r\n        // Skip server if developer opts out\r\n        if (!CONFIG.useServerPreferences) {\r\n            return defaultPrefs;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(CONFIG.baseUrl + CONFIG.apiEndpoints.getPreferences);\r\n            if (!response.ok) throw new Error(`Server returned ${response.status}`);\r\n\r\n            const prefs = await response.json();\r\n\r\n            // Validate received preferences\r\n            return {\r\n                columnTitles: (prefs?.columnTitles?.length > 0)\r\n                    ? prefs.columnTitles\r\n                    : CONFIG.defaultColumnTitles,\r\n                rowCount: (prefs?.rowCount >= 5 && prefs?.rowCount <= 35)\r\n                    ? prefs.rowCount\r\n                    : CONFIG.defaultRowCount\r\n            };\r\n        } catch (error) {\r\n            logError('Failed to fetch preferences', error);\r\n            return defaultPrefs;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up event handlers to persist preferences when they change\r\n     */\r\n    function setupPreferencesPersistence() {\r\n        // Track column changes\r\n        document.addEventListener('columnManager:columnsChanged', debounce(() => {\r\n            persistColumnTitles();\r\n        }, 500));\r\n\r\n        // Track row count changes\r\n        document.addEventListener('dropdown:rowCountChanged', debounce((event) => {\r\n            persistRowCount(event.detail.rowCount);\r\n        }, 500));\r\n\r\n        // Save on page unload\r\n        window.addEventListener('beforeunload', () => {\r\n            try {\r\n                const currentTitles = ColumnElementManager.getColumnHeaders();\r\n                const currentRowCount = DropdownContainerModule.getSelectedRowCount();\r\n\r\n                // Use sendBeacon for reliable transmission\r\n                navigator.sendBeacon(\r\n                    CONFIG.baseUrl + CONFIG.apiEndpoints.updateColumns,\r\n                    new Blob([JSON.stringify(currentTitles)], { type: 'application/json' })\r\n                );\r\n\r\n                navigator.sendBeacon(\r\n                    CONFIG.baseUrl + CONFIG.apiEndpoints.updateRowCount,\r\n                    new Blob([JSON.stringify(currentRowCount)], { type: 'application/json' })\r\n                );\r\n            } catch (error) {\r\n                logError('Failed to save preferences on unload', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Persist current column titles to server\r\n     */\r\n    async function persistColumnTitles() {\r\n        if (!CONFIG.useServerPreferences) return;\r\n\r\n        try {\r\n            const currentTitles = ColumnElementManager.getColumnHeaders();\r\n            await fetch(CONFIG.baseUrl + CONFIG.apiEndpoints.updateColumns, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(currentTitles)\r\n            });\r\n        } catch (error) {\r\n            logError('Failed to update column titles', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persist current row count to server\r\n     */\r\n    async function persistRowCount(rowCount) {\r\n        if (!CONFIG.useServerPreferences) return;\r\n\r\n        try {\r\n            await fetch(CONFIG.baseUrl + CONFIG.apiEndpoints.updateRowCount, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(rowCount)\r\n            });\r\n        } catch (error) {\r\n            logError('Failed to update row count', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simple debounce function to prevent excessive API calls\r\n     */\r\n    function debounce(func, wait) {\r\n        let timeout;\r\n        return function (...args) {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(() => func.apply(this, args), wait);\r\n        };\r\n    }\r\n\r\n    // Execute main initialization\r\n    await initializeTable();\r\n});"],"names":["document","addEventListener","async","CONFIG","baseUrl","defaultColumnTitles","defaultRowCount","apiEndpoints","getPreferences","updateColumns","updateRowCount","useServerPreferences","initialPage","logError","context","error","console","debounce","func","wait","let","timeout","args","clearTimeout","setTimeout","apply","this","areaContainer","querySelector","rowDropdownContainers","querySelectorAll","Error","container","SearchElementManager","initialize","RowElementManager","ColumnElementManager","TableElementManager","DropdownElementManager","PaginationElementManager","SearchBarModule","SortIndicatorElementManager","ColumnManagerModule","RowManagerModule","SortIndicatorModule","forEach","initializer","initError","prefs","await","defaultPrefs","columnTitles","rowCount","response","fetch","ok","json","length","status","addColumns","DropdownContainerModule","TableDataModule","DataApplierModule","setRowCountWithData","setSelectedRowCount","PaginationModule","TableTitleModule","currentTitles","getColumnHeaders","method","headers","Content-Type","body","JSON","stringify","event","detail","window","currentRowCount","getSelectedRowCount","navigator","sendBeacon","Blob","type"],"mappings":"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"}